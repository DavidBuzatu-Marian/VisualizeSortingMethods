{"version":3,"sources":["AlgorithmsSorts/AlgorithmsSorts.js","VisualizeSorts/VisualizeSorts.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","lenght","quickSort","items","left","right","index","length","middleCoord","Math","floor","pivot","i","j","indexOf","push","swap","partition","leftIndex","rightIndex","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","doMerge","getBubbleSortAnimations","arrayLength","bubbleSort","VisualizeSorts","props","onChange","e","persist","setState","target","name","value","state","animationSpeed","isAnimated","this","initArray","min","max","random","animationsLength","nrTimeout","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","arrayBar","indexOrHeight","getElementsByName","setAttribute","getAttribute","className","map","idx","key","onClick","disabled","animateMergeSort","animateQuickSort","animateBubbleSort","htmlFor","type","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08c166ad.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.lenght < 1) {\r\n    return array;\r\n  }\r\n  quickSort(array, animations, 0, array.length - 1);\r\n  return animations;\r\n}\r\n\r\nfunction swap(items, animations, leftIndex, rightIndex) {\r\n  // push the index and the height of the element we swap\r\n  animations.push([leftIndex, items[rightIndex], 0]);\r\n  animations.push([rightIndex, items[leftIndex], 0]);\r\n  let temp = items[leftIndex];\r\n  items[leftIndex] = items[rightIndex];\r\n  items[rightIndex] = temp;\r\n}\r\nfunction partition(items, animations, left, right) {\r\n  let middleCoord = Math.floor((right + left) / 2);\r\n  let pivot = items[middleCoord],\r\n    i = left,\r\n    j = right;\r\n  while (i <= j) {\r\n    middleCoord = items.indexOf(pivot);\r\n    while (items[i] < pivot) {\r\n      animations.push([i, middleCoord, 1]);\r\n      animations.push([i, middleCoord, 1]);\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      animations.push([j, middleCoord, 1]);\r\n      animations.push([j, middleCoord, 1]);\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(items, animations, i, j);\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction quickSort(items, animations, left, right) {\r\n  var index;\r\n  if (items.length > 1) {\r\n    index = partition(items, animations, left, right);\r\n    if (left < index - 1) {\r\n      quickSort(items, animations, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      quickSort(items, animations, index, right);\r\n    }\r\n  }\r\n  return items;\r\n}\r\n\r\n// algorithm from algoexpert.com for optimized merge sort\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n\r\n  bubbleSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(array, arrayLength, animations) {\r\n  for (let i = 0; i < arrayLength; i++) {\r\n    for (let j = 0; j < arrayLength - 1 - i; j++) {\r\n      animations.push([j, j + 1, 1]);\r\n      animations.push([j, j + 1, 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        swap(array, animations, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  getQuickSortAnimations,\r\n  getMergeSortAnimations,\r\n  getBubbleSortAnimations\r\n} from \"../AlgorithmsSorts/AlgorithmsSorts.js\";\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"turquoise\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"red\";\r\n// This is the color of the pivot\r\nconst PIVOT_COLOR = \"yellow\";\r\n\r\nexport default class VisualizeSorts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      animationSpeed: 1,\r\n      isAnimated: false,\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initArray();\r\n  }\r\n\r\n  initArray() {\r\n    const array = [];\r\n    for (let i = 0; i < 200; i++) {\r\n      array.push(randomIntegerFromInterval(5, 600));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  animateMergeSort() {\r\n    this.setState({\r\n      isAnimated: true\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getMergeSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({ isAnimated: false, array: auxiliaryArray });\r\n          }\r\n        }, i * animationSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateQuickSort() {\r\n    this.setState({\r\n      isAnimated: true\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getQuickSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      let pivotCoord = -1;\r\n      const arrayBar = document.getElementsByClassName(\"array-bar\");\r\n      const [barOneIdx, indexOrHeight, isComparisson] = animations[i];\r\n      if (isComparisson === 1) {\r\n        pivotCoord = indexOrHeight;\r\n        const barOneStyle = arrayBar[barOneIdx].style;\r\n        const barTwoStyle = arrayBar[indexOrHeight].style;\r\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          const barOneStyle = arrayBar[barOneIdx].style;\r\n          barOneStyle.height = `${indexOrHeight}px`;\r\n          // if (pivotCoord !== -1) {\r\n          //   const barPivot = document.getElementsByName(`${pivotCoord}`)[0];\r\n          //   barPivot.setAttribute(\r\n          //     \"name\",\r\n          //     arrayBar[barOneIdx].getAttribute(\"name\")\r\n          //   );\r\n          //   barPivot.style.color = PRIMARY_COLOR;\r\n          //   pivotCoord = -1;\r\n          // } else {\r\n          const barPivot = document.getElementsByName(`${indexOrHeight}`)[0];\r\n          barPivot.setAttribute(\r\n            \"name\",\r\n            arrayBar[barOneIdx].getAttribute(\"name\")\r\n          );\r\n          arrayBar[barOneIdx].setAttribute(\"name\", `${indexOrHeight}`);\r\n\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({ isAnimated: false, array: auxiliaryArray });\r\n          }\r\n        }, i * animationSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateBubbleSort() {\r\n    this.setState({\r\n      isAnimated: true\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getBubbleSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const [barOneIdx, indexOrHeight, isComparisson] = animations[i];\r\n      if (isComparisson === 1) {\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[indexOrHeight].style;\r\n        const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({ isAnimated: false, array: auxiliaryArray });\r\n          }\r\n        }, i * animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${indexOrHeight}px`;\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({ isAnimated: false, array: auxiliaryArray });\r\n          }\r\n        }, i * animationSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    e.persist();\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { array, isAnimated, animationSpeed } = this.state;\r\n    return (\r\n      <div className=\"h-100 left-0 position-absolute top-0 w-100\">\r\n        <div className=\"container align-items-center\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              name={value}\r\n              style={{ height: `${value}px` }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <button\r\n              className=\"btn btn-info\"\r\n              onClick={() => this.initArray()}\r\n              disabled={isAnimated}\r\n            >\r\n              Generate new array\r\n            </button>\r\n            <button\r\n              className=\"btn btn-info\"\r\n              onClick={() => this.animateMergeSort()}\r\n              disabled={isAnimated}\r\n            >\r\n              MergeSort\r\n            </button>\r\n            <button\r\n              className=\"btn btn-info\"\r\n              onClick={() => this.animateQuickSort()}\r\n              disabled={isAnimated}\r\n            >\r\n              QuickSort\r\n            </button>\r\n            <button\r\n              className=\"btn btn-info\"\r\n              onClick={() => this.animateBubbleSort()}\r\n              disabled={isAnimated}\r\n            >\r\n              BubbleSort\r\n            </button>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"animationSpeed\" className=\"\">\r\n                AnimationSpeed (in ms)\r\n              </label>\r\n              <input\r\n                className=\"form-control col-1\"\r\n                type=\"number\"\r\n                value=\"1\"\r\n                id=\"animationSpeed\"\r\n                name=\"animationSpeed\"\r\n                value={animationSpeed}\r\n                onChange={this.onChange}\r\n                disabled={isAnimated}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntegerFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React from \"react\";\nimport VisualizeSorts from \"./VisualizeSorts/VisualizeSorts\";\nimport \"./VisualizeSorts/VisualizeSorts.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VisualizeSorts></VisualizeSorts>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}