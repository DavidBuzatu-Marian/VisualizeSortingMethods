{"version":3,"sources":["AlgorithmsSorts/AlgorithmsSorts.js","VisualizeSorts/ArrayBars.jsx","VisualizeSorts/BinaryRep.jsx","VisualizeSorts/CharactersRep.jsx","VisualizeSorts/Visualizers.jsx","VisualizeSorts/VisualizeSorts.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","lenght","quickSort","items","left","right","index","length","middleCoord","Math","floor","pivot","i","j","indexOf","push","swap","partition","leftIndex","rightIndex","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","doMerge","getBubbleSortAnimations","arrayLength","bubbleSort","getHeapSortAnimations","indexOfLastParent","indexOfLastChild","compareParentWithChildren","heapSort","parent","getInsertionSortAnimations","insertionSort","getRadixSortAnimations","radixSort","nrBits","paddingForName","getKthBit","pad","toString","console","log","x","getRadixStraightAnimations","arrLength","nrPasses","counter","tableCount","0","1","2","3","key","number","m","shiftValue","shift","radixStraight","n","width","z","Array","join","ArrayBars","props","state","arrayInfo","this","setState","isSorted","barWidth","map","value","idx","className","name","style","height","backgroundColor","Component","SORTED_COLOR","BinaryRep","createBitDivs","bits","ps","keys","bit","bind","binaryType","display","scope","id","CharactersRep","Visualizers","sortingType","switchingParam","renderSwitch","timeOut","VisualizeSorts","onChange","e","persist","target","maxValue","initArray","initBinaryArray","animationSpeed","isAnimated","arraySize","binaryArraySize","title","subTitle","initArrayOnWindowWidth","window","innerWidth","clearTimeout","pop","clearAllTimeouts","randomIntegerFromInterval","includes","windowWidth","animationsLength","nrTimeout","animateColors","primary_color","secondary_color","isPivotted","pivot_color","arrayBar","document","getElementsByClassName","barOneIdx","indexOrHeight","isComparisson","barOneStyle","barTwoStyle","color","pivotColor","setTimeout","getElementsByName","setAttribute","getAttribute","barTwoIdx","newHeight","tdOfNumbers","innerHTML","reset","isTableMutation","paragraphElements","resetTable","tdOfNumber","getElementById","tdInnerHTML","trOfKey","divOfNumber","tdInnerHTMLText","substr","pOfNumber","stringInnerHTML","NumberIdx","nameOrIndex","nameOrIndexJ","BitStyleI","BitStyleJ","colorBitsI","colorBitsJ","arrayBits","Number2Div","Number1Div","Number2DivName","numberSortingMethods","aria-labelledby","disabled","onClick","animateMergeSort","animateQuickSort","href","animateHeapSort","animateBubbleSort","animateInsertionSort","binarySortingMethods","animateRadixSort","animateRadixStraightSort","zIndex","src","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","htmlFor","max","min","aria-haspopup","binarySorts","undefined","random","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.155d0e0b.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.lenght < 1) {\r\n    return array;\r\n  }\r\n  quickSort(array, animations, 0, array.length - 1);\r\n  return animations;\r\n}\r\n\r\nfunction swap(items, animations, leftIndex, rightIndex) {\r\n  // push the index and the height of the element we swap\r\n  animations.push([leftIndex, items[rightIndex], 0]);\r\n  animations.push([rightIndex, items[leftIndex], 0]);\r\n  let temp = items[leftIndex];\r\n  items[leftIndex] = items[rightIndex];\r\n  items[rightIndex] = temp;\r\n}\r\nfunction partition(items, animations, left, right) {\r\n  let middleCoord = Math.floor((right + left) / 2);\r\n  let pivot = items[middleCoord],\r\n    i = left,\r\n    j = right;\r\n  while (i <= j) {\r\n    middleCoord = items.indexOf(pivot);\r\n    while (items[i] < pivot) {\r\n      animations.push([i, middleCoord, 1]);\r\n      animations.push([i, middleCoord, 1]);\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      animations.push([j, middleCoord, 1]);\r\n      animations.push([j, middleCoord, 1]);\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(items, animations, i, j);\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction quickSort(items, animations, left, right) {\r\n  var index;\r\n  if (items.length > 1) {\r\n    index = partition(items, animations, left, right);\r\n    if (left < index - 1) {\r\n      quickSort(items, animations, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      quickSort(items, animations, index, right);\r\n    }\r\n  }\r\n  return items;\r\n}\r\n\r\n// algorithm from algoexpert.com for optimized merge sort\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j, 1]);\r\n    animations.push([i, j, 1]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i], 0]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j], 0]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i, 1]);\r\n    animations.push([i, i, 1]);\r\n    animations.push([k, auxiliaryArray[i], 0]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j, 1]);\r\n    animations.push([j, j, 1]);\r\n    animations.push([k, auxiliaryArray[j], 0]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n\r\n  bubbleSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(array, arrayLength, animations) {\r\n  for (let i = 0; i < arrayLength; i++) {\r\n    for (let j = 0; j < arrayLength - 1 - i; j++) {\r\n      animations.push([j, j + 1, 1]);\r\n      animations.push([j, j + 1, 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        swap(array, animations, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* ***************\r\n    HEAP SORT\r\n *************** */\r\n\r\nexport function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  heapSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction compareParentWithChildren(array, length, index, animations) {\r\n  let parent = index;\r\n  let left = index * 2 + 1;\r\n  let right = left + 1;\r\n  /* check if left child is greater. If it is\r\n   * parent will take its index.\r\n   * check if left is smaller than length\r\n   * in order to not compare with already sorted nodes\r\n   */\r\n  if (left < length) {\r\n    animations.push([left, parent, 1]);\r\n    animations.push([left, parent, 1]);\r\n    if (array[left] > array[parent]) {\r\n      parent = left;\r\n    }\r\n  }\r\n  /* check if right child is greater. If it is\r\n   * parent will take its index\r\n   */\r\n  if (right < length) {\r\n    animations.push([right, parent, 1]);\r\n    animations.push([right, parent, 1]);\r\n    if (array[right] > array[parent]) {\r\n      parent = right;\r\n    }\r\n  }\r\n  /* check if we found another value greater than initial parent\r\n   * swap values and recall function\r\n   */\r\n  animations.push([parent, index, 1]);\r\n  animations.push([parent, index, 1]);\r\n  if (parent !== index) {\r\n    swap(array, animations, index, parent);\r\n    /* check if nodes below are still in right order */\r\n    compareParentWithChildren(array, length, parent, animations);\r\n  }\r\n}\r\n\r\nfunction heapSort(array, length, animations) {\r\n  let indexOfLastParent = Math.floor(length / 2 - 1);\r\n  let indexOfLastChild = length - 1;\r\n\r\n  while (indexOfLastParent >= 0) {\r\n    compareParentWithChildren(array, length, indexOfLastParent, animations);\r\n    indexOfLastParent--;\r\n  }\r\n  while (indexOfLastChild >= 0) {\r\n    /* swap root with last child because it is sorted */\r\n    swap(array, animations, 0, indexOfLastChild);\r\n    compareParentWithChildren(array, indexOfLastChild, 0, animations);\r\n    indexOfLastChild--;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/* STRAIGHT INSERTION */\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  insertionSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(array, length, animations) {\r\n  let i, j;\r\n  for (i = 1; i < length; ++i) {\r\n    for (j = i; j > 0 && array[j - 1] > array[j]; --j) {\r\n      animations.push([j - 1, j, 1]);\r\n      animations.push([j - 1, j, 1]);\r\n      swap(array, animations, j, j - 1);\r\n    }\r\n  }\r\n}\r\n\r\n/* RADIX SORT */\r\n\r\nexport function getRadixSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  radixSort(array, 0, array.length - 1, animations, 5, 1);\r\n  console.log(array);\r\n  return animations;\r\n}\r\n\r\nfunction radixSort(array, left, right, animations, nrBits, paddingForName) {\r\n  if (right > left && nrBits >= 0) {\r\n    let i = left;\r\n    let j = right;\r\n    do {\r\n      while (getKthBit(array[i], nrBits) === 0 && i < j) {\r\n        i++;\r\n      }\r\n\r\n      while (getKthBit(array[j], nrBits) === 1 && i < j) {\r\n        j--;\r\n      }\r\n      if (i < j) {\r\n        animations.push([\r\n          i,\r\n          pad(array[i].toString(2), 6) + pad(1, paddingForName),\r\n          1,\r\n          pad(array[j].toString(2), 6) + pad(0, paddingForName)\r\n        ]);\r\n        animations.push([\r\n          i,\r\n          pad(array[i].toString(2), 6) + pad(1, paddingForName),\r\n          1,\r\n          pad(array[j].toString(2), 6) + pad(0, paddingForName)\r\n        ]);\r\n      }\r\n\r\n      swap(array, animations, i, j);\r\n    } while (j !== i);\r\n\r\n    if (getKthBit(array[right], nrBits) === 0) {\r\n      j++;\r\n    }\r\n    radixSort(array, left, j - 1, animations, nrBits - 1, paddingForName + 1);\r\n    radixSort(array, j, right, animations, nrBits - 1, paddingForName + 1);\r\n  }\r\n}\r\n\r\nfunction getKthBit(x, k) {\r\n  return (x >> k) & 1;\r\n}\r\n\r\n/* RADIX STRAIGHT SORT */\r\nexport function getRadixStraightAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  radixStraight(array, array.length, animations);\r\n  console.log(array);\r\n  return animations;\r\n}\r\n\r\nfunction radixStraight(array, arrLength, animations) {\r\n  let i = 0,\r\n    nrBits = 6,\r\n    mask = 2,\r\n    nrPasses = 0;\r\n  for (nrPasses = 0; nrPasses < nrBits / mask; nrPasses++) {\r\n    let counter = 0;\r\n    let tableCount = { 0: [], 1: [], 2: [], 3: [] };\r\n    for (i = 0; i < arrLength; i++) {\r\n      let key = getMBits(array[i], mask, nrPasses * mask).toString();\r\n      tableCount[key].push(array[i]);\r\n      animations.push([key, array[i], 1]);\r\n      animations.push([key, array[i], 1]);\r\n    }\r\n\r\n    for (var key in tableCount) {\r\n      while (tableCount[key].length > 0) {\r\n        array[counter++] = tableCount[key].shift();\r\n        animations.push([key, array[counter - 1], 0]);\r\n        animations.push([key, array[counter - 1], 0]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getMBits(number, m, shiftValue) {\r\n  return (number >> shiftValue) & ~(~0 << m);\r\n}\r\n\r\n/* SPECIAL THANKS TO POINTY FROM  STACK OVERFLOW\r\nhttps://stackoverflow.com/a/10073788/11023871\r\n*/\r\nfunction pad(n, width, z) {\r\n  z = z || \"0\";\r\n  n = n + \"\";\r\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nconst PRIMARY_COLOR = \"#c2e8ce\";\r\nconst SORTED_COLOR = \"#f6ad7b\";\r\n\r\nexport default class ArrayBars extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = props.arrayInfo;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this.props.arrayInfo);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    this.setState(props.arrayInfo);\r\n  }\r\n  render() {\r\n    const { array, isSorted } = this.state.arrayInfo;\r\n    const barWidth = array.length > 90 ? 3 : 10;\r\n    return array.map((value, idx) => (\r\n      <div\r\n        className=\"array-bar\"\r\n        key={idx}\r\n        name={value}\r\n        style={{\r\n          height: `${value}px`,\r\n          width: `${barWidth}px`,\r\n          backgroundColor: isSorted ? SORTED_COLOR : PRIMARY_COLOR\r\n        }}\r\n      ></div>\r\n    ));\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nconst PRIMARY_COLOR = \"#c2e8ce\";\r\nconst SORTED_COLOR = \"#f6ad7b\";\r\n\r\nexport default class BinaryRep extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = props.arrayInfo;\r\n    this.pad = this.pad.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this.props.arrayInfo);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    this.setState(props.arrayInfo);\r\n  }\r\n\r\n  /* SPECIAL THANKS TO POINTY FROM  STACK OVERFLOW\r\n  https://stackoverflow.com/a/10073788/11023871\r\n  */\r\n  pad(n, width, z) {\r\n    z = z || \"0\";\r\n    n = n + \"\";\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n  }\r\n\r\n  createBitDivs = (bits, isSorted) => {\r\n    let ps = [];\r\n    var keys = 0;\r\n    for (let bit of bits) {\r\n      ps.push(\r\n        <p\r\n          key={keys++}\r\n          name={bits + this.pad(bit, keys)}\r\n          className=\"col-2 bits\"\r\n          style={{\r\n            backgroundColor: isSorted ? SORTED_COLOR : \"\"\r\n          }}\r\n        >{`${bit}`}</p>\r\n      );\r\n    }\r\n    return ps;\r\n  };\r\n\r\n  render() {\r\n    const { array, isSorted } = this.state.arrayInfo;\r\n    return (\r\n      <div className=\"row mt-5 \">\r\n        {this.props.binaryType === 0 ? (\r\n          array.map((value, idx) => (\r\n            <div\r\n              className=\"array-binary col-12\"\r\n              key={idx}\r\n              name={value}\r\n              style={{\r\n                backgroundColor: isSorted ? SORTED_COLOR : PRIMARY_COLOR,\r\n                display: \"flex\"\r\n              }}\r\n            >\r\n              {this.createBitDivs(this.pad(value.toString(2), 6), isSorted)}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-6\">\r\n                {array.map((value, idx) => (\r\n                  <p\r\n                    className={`array-binary text-center p-responsive ` + value}\r\n                    key={idx}\r\n                    name={value}\r\n                    style={{\r\n                      backgroundColor: isSorted ? SORTED_COLOR : PRIMARY_COLOR\r\n                    }}\r\n                  >\r\n                    {this.pad(value.toString(2), 6)}\r\n                  </p>\r\n                ))}\r\n              </div>\r\n              <div className=\"col-6\">\r\n                <table className=\"table table-bordered table-dark\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th scope=\"col\">Mask</th>\r\n                      <th scope=\"col\">Numbers</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    <tr id=\"row_0\">\r\n                      <th scope=\"row\">00</th>\r\n                      <td id=\"col_0\" className=\"col_0 table_row\"></td>\r\n                    </tr>\r\n                    <tr id=\"row_1\">\r\n                      <th scope=\"row\">01</th>\r\n                      <td id=\"col_1\" className=\"col_1 table_row\"></td>\r\n                    </tr>\r\n                    <tr id=\"row_2\">\r\n                      <th scope=\"row\">10</th>\r\n                      <td id=\"col_2\" className=\"col_2 table_row\"></td>\r\n                    </tr>\r\n                    <tr id=\"row_3\">\r\n                      <th scope=\"row\">11</th>\r\n                      <td id=\"col_3\" className=\"col_3 table_row\"></td>\r\n                    </tr>\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class CharactersRep extends Component {\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ArrayBars from \"./ArrayBars\";\r\nimport BinaryRep from \"./BinaryRep\";\r\nimport CharactersRep from \"./CharactersRep\";\r\n\r\nexport default class Visualizers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: props.arrayInfo.array,\r\n      isSorted: props.arrayInfo.isSorted,\r\n      sortingType: props.arrayInfo.sortingType\r\n    };\r\n  }\r\n\r\n  renderSwitch(switchingParam) {\r\n    switch (switchingParam) {\r\n      case 0:\r\n        return <ArrayBars arrayInfo={this.props}></ArrayBars>;\r\n      case 1:\r\n        return (\r\n          <BinaryRep\r\n            arrayInfo={this.props}\r\n            binaryType={this.props.binaryType}\r\n          ></BinaryRep>\r\n        );\r\n      case 2:\r\n        return <CharactersRep arrayInfo={this.props}></CharactersRep>;\r\n      default:\r\n        return <ArrayBars arrayInfo={this.props}></ArrayBars>;\r\n    }\r\n  }\r\n  render() {\r\n    return <div>{this.renderSwitch(this.props.arrayInfo.sortingType)}</div>;\r\n  }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  getQuickSortAnimations,\r\n  getMergeSortAnimations,\r\n  getBubbleSortAnimations,\r\n  getHeapSortAnimations,\r\n  getInsertionSortAnimations,\r\n  getRadixSortAnimations,\r\n  getRadixStraightAnimations\r\n} from \"../AlgorithmsSorts/AlgorithmsSorts.js\";\r\nimport Visualizers from \"./Visualizers.jsx\";\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"#c2e8ce\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"#be7575\";\r\n// This is the color of the bits\r\nconst BIT_COLOR = \"#F6AD7B\";\r\n// This is the color of the pivot\r\nconst PIVOT_COLOR = \"yellow\";\r\nvar timeOut = [];\r\n\r\nexport default class VisualizeSorts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      animationSpeed: 1,\r\n      isAnimated: false,\r\n      isSorted: false,\r\n      array: [],\r\n      arraySize: 200,\r\n      binaryArraySize: 15,\r\n      binaryType: 0,\r\n      initArray: this.initArray,\r\n      sortingType: 0, // 0 = numbers, 1 = binary, 2 = string search\r\n      key: 0,\r\n      title: \"Sorting methods for numbers\",\r\n      subTitle: \"Select a sorting type and a method for more details\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initArrayOnWindowWidth(window.innerWidth);\r\n    // window.addEventListener(\"resize\", this.resize.bind(this));\r\n    // this.resize();\r\n  }\r\n\r\n  // componentWillUnmount() {\r\n  //   window.removeEventListener(\"resize\", this.resize);\r\n  // }\r\n\r\n  // resize() {\r\n  //   const windowWidth = window.innerWidth;\r\n  //   this.initArrayOnWindowWidth(windowWidth);\r\n  // }\r\n  clearAllTimeouts() {\r\n    while (timeOut.length > 0) {\r\n      clearTimeout(timeOut.pop());\r\n    }\r\n    this.setState({\r\n      isAnimated: false,\r\n      isSorted: true\r\n    });\r\n  }\r\n\r\n  initBinaryArray() {\r\n    this.clearAllTimeouts();\r\n    const array = [];\r\n    const key = this.state.key;\r\n    for (let i = 0; i < this.state.binaryArraySize; i++) {\r\n      let value = randomIntegerFromInterval(1, 63);\r\n      !array.includes(value) ? array.push(value) : i--;\r\n    }\r\n    this.setState({\r\n      array,\r\n      isSorted: false,\r\n      sortingType: 1,\r\n      animationSpeed: 250,\r\n      initArray: this.initBinaryArray,\r\n      key: key + 1,\r\n      title: \"Sorting methods for binary numbers\",\r\n      subTitle: \"Select a sorting type and a method for more details\"\r\n    });\r\n  }\r\n\r\n  initArray() {\r\n    this.clearAllTimeouts();\r\n    const array = [];\r\n    const key = this.state.key;\r\n    for (let i = 0; i < this.state.arraySize; i++) {\r\n      array.push(randomIntegerFromInterval(5, 600));\r\n    }\r\n    this.setState({\r\n      array,\r\n      isSorted: false,\r\n      sortingType: 0,\r\n      initArray: this.initArray,\r\n      key: key + 1,\r\n      title: \"Sorting methods for numbers\",\r\n      subTitle: \"Select a sorting type and a method for more details\"\r\n    });\r\n  }\r\n  initArrayOnWindowWidth(windowWidth) {\r\n    if (windowWidth < 1260 && windowWidth > 568) {\r\n      this.setState(\r\n        {\r\n          arraySize: randomIntegerFromInterval(5, 40),\r\n          isSorted: false\r\n        },\r\n        () => {\r\n          this.initArray();\r\n        }\r\n      );\r\n    } else if (windowWidth < 568) {\r\n      this.setState(\r\n        {\r\n          arraySize: randomIntegerFromInterval(5, 20),\r\n          isSorted: false\r\n        },\r\n        () => {\r\n          this.initArray();\r\n        }\r\n      );\r\n    } else if (this.state.array.length === 0) {\r\n      this.initArray();\r\n    }\r\n  }\r\n\r\n  animateHeapSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Heap Sort\",\r\n      subTitle:\r\n        \"Heap sort is based on the repeated selection of the biggest key among items using at every step a maximal heap of the remaining elements\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getHeapSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  animateColors(\r\n    animations,\r\n    auxiliaryArray,\r\n    animationSpeed,\r\n    animationsLength,\r\n    i,\r\n    nrTimeout,\r\n    primary_color,\r\n    secondary_color,\r\n    isPivotted = false,\r\n    pivot_color = PIVOT_COLOR\r\n  ) {\r\n    const key = this.state.key;\r\n    const arrayBar = document.getElementsByClassName(\"array-bar\");\r\n    const [barOneIdx, indexOrHeight, isComparisson] = animations[i];\r\n    if (isComparisson === 1) {\r\n      const barOneStyle = arrayBar[barOneIdx].style;\r\n      const barTwoStyle = arrayBar[indexOrHeight].style;\r\n      const color = i % 2 === 0 ? secondary_color : primary_color;\r\n      const pivotColor = i % 2 === 0 ? pivot_color : primary_color;\r\n      timeOut.push(\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = isPivotted ? pivotColor : color;\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({\r\n              isAnimated: false,\r\n              array: auxiliaryArray,\r\n              key: key + 1,\r\n              isSorted: true\r\n            });\r\n          }\r\n        }, i * animationSpeed)\r\n      );\r\n    } else {\r\n      timeOut.push(\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          const barOneStyle = arrayBar[barOneIdx].style;\r\n          barOneStyle.height = `${indexOrHeight}px`;\r\n          const barPivot = document.getElementsByName(`${indexOrHeight}`)[0];\r\n          barPivot.setAttribute(\r\n            \"name\",\r\n            arrayBar[barOneIdx].getAttribute(\"name\")\r\n          );\r\n          arrayBar[barOneIdx].setAttribute(\"name\", `${indexOrHeight}`);\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({\r\n              isAnimated: false,\r\n              array: auxiliaryArray,\r\n              key: key + 1,\r\n              isSorted: true\r\n            });\r\n          }\r\n        }, i * animationSpeed)\r\n      );\r\n    }\r\n  }\r\n\r\n  animateMergeSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Merge Sort\",\r\n      subTitle:\r\n        \"Merge sort works on the principle of its name: 'merging'. We split the elements in smaller subsets until we get 1 element and then we start merging them in order\"\r\n    });\r\n    const key = this.state.key;\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getMergeSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const arrayBar = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBar[barOneIdx].style;\r\n        const barTwoStyle = arrayBar[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        timeOut.push(\r\n          setTimeout(() => {\r\n            nrTimeout++;\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * animationSpeed)\r\n        );\r\n      } else {\r\n        timeOut.push(\r\n          setTimeout(() => {\r\n            nrTimeout++;\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBar[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n            const barPivot = document.getElementsByName(`${newHeight}`)[0];\r\n            barPivot.setAttribute(\r\n              \"name\",\r\n              arrayBar[barOneIdx].getAttribute(\"name\")\r\n            );\r\n            arrayBar[barOneIdx].setAttribute(\"name\", `${newHeight}`);\r\n            if (nrTimeout === animationsLength) {\r\n              this.setState({\r\n                isAnimated: false,\r\n                array: auxiliaryArray,\r\n                key: key + 1,\r\n                isSorted: true\r\n              });\r\n            }\r\n          }, i * animationSpeed)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  animateQuickSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Quick Sort\",\r\n      subTitle:\r\n        \"Quick sort works on selecting a pivot (middle elem. in our case) and putting all smaller elem. before it and bigger elem. after it, splitting afterwards in two halves, continuing the process\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getQuickSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR,\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  animateBubbleSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Bubble Sort\",\r\n      subTitle:\r\n        \"Bubble sort compares everytime 2 neighboring elements, putting after one iteration the biggest element found at the end\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getBubbleSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    e.persist();\r\n    if (e.target.name === \"animationSpeed\") {\r\n      this.setState({ [e.target.name]: e.target.value });\r\n    } else {\r\n      let maxValue =\r\n        e.target.name === \"arraySize\"\r\n          ? 200\r\n          : e.target.name === \"binaryArraySize\"\r\n          ? 20\r\n          : 20;\r\n      this.setState(\r\n        {\r\n          [e.target.name]:\r\n            e.target.value <= maxValue ? e.target.value : maxValue\r\n        },\r\n        () => {\r\n          if (e.target.name === \"arraySize\" && e.target.value <= maxValue) {\r\n            this.initArray();\r\n          } else if (\r\n            e.target.name === \"binaryArraySize\" &&\r\n            e.target.value <= maxValue\r\n          ) {\r\n            this.initBinaryArray();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  animateInsertionSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Insertion Sort\",\r\n      subTitle:\r\n        \"Insertion sort always puts the ith element into its appropiate position, resulting in i - 1 sorted elements on every step\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getInsertionSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  /* SPECIAL THANKS TO POINTY FROM  STACK OVERFLOW\r\nhttps://stackoverflow.com/a/10073788/11023871\r\n*/\r\n  pad(n, width, z) {\r\n    z = z || \"0\";\r\n    n = n + \"\";\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n  }\r\n\r\n  resetTable() {\r\n    let tdOfNumbers = document.getElementsByClassName(\"table_row\");\r\n    let i;\r\n    for (i = 0; i < tdOfNumbers.length; i++) {\r\n      tdOfNumbers[i].innerHTML = \"\";\r\n    }\r\n  }\r\n\r\n  animateRadixStraightSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      binaryType: 1,\r\n      title: \"Straight Sort\",\r\n      subTitle:\r\n        \"Straight sort always puts the ith element into its appropiate position, resulting in i - 1 sorted elements on every step\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getRadixStraightAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    let reset = 1;\r\n    var counter = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const [key, value, isTableMutation] = animations[i];\r\n      const paragraphElements = document.getElementsByClassName(\"array-binary\");\r\n      if (isTableMutation) {\r\n        timeOut.push(\r\n          setTimeout(() => {\r\n            nrTimeout++;\r\n            if (reset) {\r\n              this.resetTable();\r\n              reset = 0;\r\n              counter = 0;\r\n            }\r\n            if (i % 2 === 0) {\r\n              let tdOfNumber = document.getElementById(\"col_\" + key);\r\n              let tdInnerHTML = tdOfNumber.innerHTML;\r\n              tdOfNumber.innerHTML =\r\n                tdInnerHTML + this.pad(value.toString(2), 6) + \", \";\r\n            }\r\n            let trOfKey = document.getElementById(\"row_\" + key);\r\n            let divOfNumber = document.getElementsByName(value)[0];\r\n            const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n            trOfKey.style.backgroundColor = color;\r\n            divOfNumber.style.backgroundColor = color;\r\n          }, i * animationSpeed)\r\n        );\r\n      } else {\r\n        timeOut.push(\r\n          setTimeout(() => {\r\n            nrTimeout++;\r\n            if (i % 2 === 0) {\r\n              const tdOfNumber = document.getElementById(\"col_\" + key);\r\n              const tdInnerHTML = tdOfNumber.innerHTML;\r\n              const tdInnerHTMLText = tdInnerHTML.substr(8);\r\n              tdOfNumber.innerHTML = tdInnerHTMLText;\r\n\r\n              const pOfNumber = paragraphElements[counter++];\r\n              pOfNumber.setAttribute(\"name\", value);\r\n              const stringInnerHTML = this.pad(value.toString(2), 6);\r\n              pOfNumber.innerHTML = stringInnerHTML;\r\n            }\r\n            if (nrTimeout === animationsLength) {\r\n              this.setState({\r\n                isAnimated: false,\r\n                array: auxiliaryArray,\r\n                key: key + 1,\r\n                isSorted: true\r\n              });\r\n            }\r\n            reset = 1;\r\n          }, i * animationSpeed)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  animateRadixSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      binaryType: 0,\r\n      title: \"Radix sort\",\r\n      subTitle:\r\n        \"Radix exchange sort finishes when all keys that begin with a 0 bit come before all keys that begin with a 1 bit. \"\r\n    });\r\n    const key = this.state.key;\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getRadixSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const [NumberIdx, nameOrIndex, isComparisson, nameOrIndexJ] = animations[\r\n        i\r\n      ];\r\n\r\n      if (isComparisson === 1) {\r\n        timeOut.push(\r\n          setTimeout(() => {\r\n            const arrayIndividualBitsI = document.getElementsByName(\r\n              nameOrIndex\r\n            )[0];\r\n            const BitStyleI = arrayIndividualBitsI.style;\r\n\r\n            const arrayIndividualBitsJ = document.getElementsByName(\r\n              nameOrIndexJ\r\n            )[0];\r\n            const BitStyleJ = arrayIndividualBitsJ.style;\r\n            const colorBitsI = i % 2 === 0 ? BIT_COLOR : PRIMARY_COLOR;\r\n            const colorBitsJ = i % 2 === 0 ? BIT_COLOR : PRIMARY_COLOR;\r\n            nrTimeout++;\r\n            BitStyleI.backgroundColor = colorBitsI;\r\n            BitStyleJ.backgroundColor = colorBitsJ;\r\n          }, i * animationSpeed)\r\n        );\r\n      } else {\r\n        timeOut.push(\r\n          setTimeout(() => {\r\n            const arrayBits = document.getElementsByClassName(\"array-binary\");\r\n            nrTimeout++;\r\n            const Number2Div = document.getElementsByName(nameOrIndex)[0];\r\n            const Number1Div = arrayBits[NumberIdx];\r\n            const Number2DivName = Number2Div.getAttribute(\"name\");\r\n            Number2Div.setAttribute(\"name\", Number1Div.getAttribute(\"name\"));\r\n            Number1Div.setAttribute(\"name\", Number2DivName);\r\n            /* swap innet HTML */\r\n            const innerHTML = Number1Div.innerHTML;\r\n            Number1Div.innerHTML = Number2Div.innerHTML;\r\n            Number2Div.innerHTML = innerHTML;\r\n            if (nrTimeout === animationsLength) {\r\n              this.setState({\r\n                isAnimated: false,\r\n                array: auxiliaryArray,\r\n                key: key + 1,\r\n                isSorted: true\r\n              });\r\n            }\r\n          }, i * animationSpeed)\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  binarySorts() {\r\n    this.initBinaryArray();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      array,\r\n      isAnimated,\r\n      animationSpeed,\r\n      arraySize,\r\n      binaryArraySize,\r\n      isSorted,\r\n      sortingType,\r\n      key,\r\n      title,\r\n      subTitle\r\n    } = this.state;\r\n    const numberSortingMethods = (\r\n      <ul\r\n        className=\"dropdown-menu dropdown-menu-right p-0\"\r\n        aria-labelledby=\"navbarDropdown\"\r\n        disabled={isAnimated}\r\n      >\r\n        <li>\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateMergeSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            MergeSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateQuickSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            QuickSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            href=\"#\"\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateHeapSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            HeapSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            href=\"#\"\r\n            className=\"navbar-function-link my-auto p-3 btn w-100\"\r\n            onClick={() => this.animateBubbleSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            BubbleSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            href=\"#\"\r\n            className=\"navbar-function-link my-auto p-3 btn w-100\"\r\n            onClick={() => this.animateInsertionSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            InsertionSort\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    );\r\n    const binarySortingMethods = (\r\n      <ul\r\n        className=\"dropdown-menu dropdown-menu-right p-0\"\r\n        aria-labelledby=\"navbarDropdown\"\r\n      >\r\n        <li className=\"nav-item  my-auto\">\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateRadixSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            RadixSort\r\n          </button>\r\n        </li>\r\n        <li className=\"nav-item  my-auto\">\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateRadixStraightSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            RadixStraightSort\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    );\r\n    return (\r\n      <Fragment>\r\n        <nav\r\n          id=\"navbar\"\r\n          className={` navbar navbar-expand-lg navbar-light bg-light fixed-top`}\r\n          style={{ zIndex: \"1\", width: \"100%\" }}\r\n        >\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            <img\r\n              id=\"homeLink\"\r\n              src=\"./logo512.png\"\r\n              alt=\"VisualizeSortingMethods\"\r\n              height=\"80px\"\r\n              width=\"80px\"\r\n            />\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarTogglerDemo01\"\r\n            aria-controls=\"navbarTogglerDemo01\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\r\n            <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <div className=\"form-group p-3\">\r\n                  <label htmlFor=\"animationSpeed\" className=\"\">\r\n                    AnimationSpeed (in ms)\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    id=\"animationSpeed\"\r\n                    name=\"animationSpeed\"\r\n                    value={animationSpeed}\r\n                    onChange={this.onChange}\r\n                    disabled={isAnimated}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div className=\"form-group p-3\">\r\n                  <label htmlFor=\"arraySize\" className=\"\">\r\n                    ArraySize (nr. bars)\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    max=\"200\"\r\n                    min=\"1\"\r\n                    id=\"arraySize\"\r\n                    name={\r\n                      sortingType === 0\r\n                        ? \"arraySize\"\r\n                        : sortingType === 1\r\n                        ? \"binaryArraySize\"\r\n                        : \"\"\r\n                    }\r\n                    value={\r\n                      sortingType === 0\r\n                        ? arraySize\r\n                        : sortingType === 1\r\n                        ? binaryArraySize\r\n                        : \"\"\r\n                    }\r\n                    onChange={this.onChange}\r\n                    disabled={isAnimated}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item dropdown align-items-center my-auto\">\r\n                <button\r\n                  className=\"p-3 dropdown-toggle btn navbar-function-link w-100\"\r\n                  id=\"navbarDropdown\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  disabled={isAnimated}\r\n                >\r\n                  SortingType\r\n                </button>\r\n                <ul\r\n                  className=\"dropdown-menu dropdown-menu-right p-0\"\r\n                  aria-labelledby=\"navbarDropdown\"\r\n                >\r\n                  <li>\r\n                    <button\r\n                      className=\"navbar-function-link btn p-3  w-100\"\r\n                      onClick={() => this.initArray()}\r\n                    >\r\n                      Number Sorts\r\n                    </button>\r\n                  </li>\r\n                  <li>\r\n                    <button\r\n                      className=\"navbar-function-link btn p-3  w-100\"\r\n                      onClick={() => this.binarySorts()}\r\n                    >\r\n                      Binary Sorts\r\n                    </button>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item my-auto\">\r\n                <button\r\n                  className=\"navbar-function-link btn p-3 w-100\"\r\n                  onClick={() =>\r\n                    sortingType === 0\r\n                      ? this.initArray()\r\n                      : sortingType === 1\r\n                      ? this.initBinaryArray()\r\n                      : \"\"\r\n                  }\r\n                >\r\n                  Generate new array\r\n                </button>\r\n              </li>\r\n              <li className=\"nav-item dropdown align-items-center my-auto\">\r\n                <button\r\n                  className=\"p-3 dropdown-toggle btn navbar-function-link w-100\"\r\n                  id=\"navbarDropdown\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  disabled={isAnimated}\r\n                >\r\n                  {sortingType === 0\r\n                    ? \"MethodsForNumbers\"\r\n                    : sortingType === 1\r\n                    ? \"MethodsForBinary\"\r\n                    : \"Methods For Strings\"}\r\n                </button>\r\n                {sortingType === 0\r\n                  ? numberSortingMethods\r\n                  : binarySortingMethods}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        <div\r\n          className={` position-absolute w-100 flexbar-bars ${\r\n            sortingType === 0 ? \"h-100 mt-5\" : \"margin-top-navbar\"\r\n          }`}\r\n        >\r\n          <div className=\"container align-bars-center\">\r\n            <h1 className=\"title mt-1\">{title}</h1>\r\n            <h4 className=\" sub-title mb-5\">{subTitle}</h4>\r\n            {array !== undefined && array.length > 0 ? (\r\n              <Visualizers\r\n                key={key}\r\n                arrayInfo={{ array, isSorted, sortingType }}\r\n                binaryType={this.state.binaryType}\r\n              ></Visualizers>\r\n            ) : (\r\n              <div>Loading</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntegerFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React, { Fragment } from \"react\";\nimport VisualizeSorts from \"./VisualizeSorts/VisualizeSorts\";\nimport \"./VisualizeSorts/VisualizeSorts.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Fragment>\n        <VisualizeSorts></VisualizeSorts>\n      </Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}