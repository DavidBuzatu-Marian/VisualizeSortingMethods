{"version":3,"sources":["AlgorithmsSorts/AlgorithmsSorts.js","VisualizeSorts/ArrayBars.jsx","VisualizeSorts/BinaryRep.jsx","VisualizeSorts/CharactersRep.jsx","VisualizeSorts/Visualizers.jsx","VisualizeSorts/VisualizeSorts.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","lenght","quickSort","items","left","right","index","length","middleCoord","Math","floor","pivot","i","j","indexOf","push","swap","partition","leftIndex","rightIndex","temp","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","doMerge","getBubbleSortAnimations","arrayLength","bubbleSort","getHeapSortAnimations","indexOfLastParent","indexOfLastChild","compareParentWithChildren","heapSort","parent","getInsertionSortAnimations","insertionSort","getRadixSortAnimations","radixSort","nrBits","paddingForName","jBitsThatAppearKBitPositionsFromRight","pad","toString","console","log","x","n","width","z","Array","join","ArrayBars","props","state","arrayInfo","this","setState","isSorted","barWidth","map","value","idx","className","key","name","style","height","backgroundColor","Component","PRIMARY_COLOR","BinaryRep","createBitDivs","bits","ps","keys","bit","bind","display","CharactersRep","Visualizers","sortingType","switchingParam","renderSwitch","VisualizeSorts","onChange","e","persist","target","maxValue","initArray","initBinaryArray","animationSpeed","isAnimated","arraySize","binaryArraySize","title","subTitle","initArrayOnWindowWidth","window","innerWidth","addEventListener","resize","removeEventListener","windowWidth","randomIntegerFromInterval","includes","animationsLength","nrTimeout","animateColors","primary_color","secondary_color","arrayBar","document","getElementsByClassName","barOneIdx","indexOrHeight","barOneStyle","barTwoStyle","color","setTimeout","getElementsByName","setAttribute","getAttribute","barTwoIdx","newHeight","NumberIdx","nameOrIndex","isComparisson","nameOrIndexJ","BitStyleI","BitStyleJ","colorBitsI","colorBitsJ","arrayBits","Number2Div","Number1Div","Number2DivName","innerHTML","numberSortingMethods","aria-labelledby","disabled","onClick","animateMergeSort","animateQuickSort","href","animateHeapSort","animateBubbleSort","animateInsertionSort","binarySortingMethods","animateRadixSort","id","zIndex","src","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","htmlFor","max","min","aria-haspopup","binarySorts","undefined","random","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAAO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,OAAID,EAAME,OAAS,EACVF,GAwCX,SAASG,EAAUC,EAAOH,EAAYI,EAAMC,GAC1C,IAAIC,EACAH,EAAMI,OAAS,IACjBD,EA7BJ,SAAmBH,EAAOH,EAAYI,EAAMC,GAC1C,IAAIG,EAAcC,KAAKC,OAAOL,EAAQD,GAAQ,GAC1CO,EAAQR,EAAMK,GAChBI,EAAIR,EACJS,EAAIR,EACN,KAAOO,GAAKC,GAAG,CAEb,IADAL,EAAcL,EAAMW,QAAQH,GACrBR,EAAMS,GAAKD,GAChBX,EAAWe,KAAK,CAACH,EAAGJ,EAAa,IACjCR,EAAWe,KAAK,CAACH,EAAGJ,EAAa,IACjCI,IAEF,KAAOT,EAAMU,GAAKF,GAChBX,EAAWe,KAAK,CAACF,EAAGL,EAAa,IACjCR,EAAWe,KAAK,CAACF,EAAGL,EAAa,IACjCK,IAEED,GAAKC,IACPG,EAAKb,EAAOH,EAAYY,EAAGC,GAC3BD,IACAC,KAGJ,OAAOD,EAMGK,CAAUd,EAAOH,EAAYI,EAAMC,GACvCD,EAAOE,EAAQ,GACjBJ,EAAUC,EAAOH,EAAYI,EAAME,EAAQ,GAEzCA,EAAQD,GACVH,EAAUC,EAAOH,EAAYM,EAAOD,IAGxC,OAAOF,EAjDPD,CAAUH,EAAOC,EAAY,EAAGD,EAAMQ,OAAS,GACxCP,GAGT,SAASgB,EAAKb,EAAOH,EAAYkB,EAAWC,GAE1CnB,EAAWe,KAAK,CAACG,EAAWf,EAAMgB,GAAa,IAC/CnB,EAAWe,KAAK,CAACI,EAAYhB,EAAMe,GAAY,IAC/C,IAAIE,EAAOjB,EAAMe,GACjBf,EAAMe,GAAaf,EAAMgB,GACzBhB,EAAMgB,GAAcC,EA2Cf,SAASC,EAAuBtB,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAMQ,QAAU,EAAG,OAAOR,EAC9B,IAAMuB,EAAiBvB,EAAMwB,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAtB,GAEA,GAAI0B,IAAaC,EAAQ,OACzB,IAAMC,EAAYnB,KAAKC,OAAOgB,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWzB,GAChEwB,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWzB,IAIpE,SACEyB,EACAC,EACAE,EACAD,EACAL,EACAtB,GAEA,IAAI6B,EAAIH,EACJd,EAAIc,EACJb,EAAIe,EAAY,EACpB,KAAOhB,GAAKgB,GAAaf,GAAKc,GAC5B3B,EAAWe,KAAK,CAACH,EAAGC,EAAG,IACvBb,EAAWe,KAAK,CAACH,EAAGC,EAAG,IACnBS,EAAeV,IAAMU,EAAeT,IACtCb,EAAWe,KAAK,CAACc,EAAGP,EAAeV,GAAI,IACvCa,EAAUI,KAAOP,EAAeV,OAEhCZ,EAAWe,KAAK,CAACc,EAAGP,EAAeT,GAAI,IACvCY,EAAUI,KAAOP,EAAeT,MAGpC,KAAOD,GAAKgB,GACV5B,EAAWe,KAAK,CAACH,EAAGA,EAAG,IACvBZ,EAAWe,KAAK,CAACH,EAAGA,EAAG,IACvBZ,EAAWe,KAAK,CAACc,EAAGP,EAAeV,GAAI,IACvCa,EAAUI,KAAOP,EAAeV,KAElC,KAAOC,GAAKc,GACV3B,EAAWe,KAAK,CAACF,EAAGA,EAAG,IACvBb,EAAWe,KAAK,CAACF,EAAGA,EAAG,IACvBb,EAAWe,KAAK,CAACc,EAAGP,EAAeT,GAAI,IACvCY,EAAUI,KAAOP,EAAeT,KAnClCiB,CAAQL,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBtB,GAfhEwB,CAAgBzB,EAAO,EAAGA,EAAMQ,OAAS,EAAGe,EAAgBtB,GACrDA,EAqDF,SAAS+B,EAAwBhC,GACtC,IAAMC,EAAa,GACnB,OAAID,EAAMQ,OAAS,EACVR,GAOX,SAAoBA,EAAOiC,EAAahC,GACtC,IAAK,IAAIY,EAAI,EAAGA,EAAIoB,EAAapB,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAImB,EAAc,EAAIpB,EAAGC,IACvCb,EAAWe,KAAK,CAACF,EAAGA,EAAI,EAAG,IAC3Bb,EAAWe,KAAK,CAACF,EAAGA,EAAI,EAAG,IACvBd,EAAMc,GAAKd,EAAMc,EAAI,IACvBG,EAAKjB,EAAOC,EAAYa,EAAGA,EAAI,GAVrCoB,CAAWlC,EAAOA,EAAMQ,OAAQP,GACzBA,GAmBF,SAASkC,EAAsBnC,GACpC,IAAMC,EAAa,GACnB,OAAID,EAAMQ,OAAS,EACVR,GA4CX,SAAkBA,EAAOQ,EAAQP,GAC/B,IAAImC,EAAoB1B,KAAKC,MAAMH,EAAS,EAAI,GAC5C6B,EAAmB7B,EAAS,EAEhC,KAAO4B,GAAqB,GAC1BE,EAA0BtC,EAAOQ,EAAQ4B,EAAmBnC,GAC5DmC,IAEF,KAAOC,GAAoB,GAEzBpB,EAAKjB,EAAOC,EAAY,EAAGoC,GAC3BC,EAA0BtC,EAAOqC,EAAkB,EAAGpC,GACtDoC,IAtDFE,CAASvC,EAAOA,EAAMQ,OAAQP,GACvBA,GAGT,SAASqC,EAA0BtC,EAAOQ,EAAQD,EAAON,GACvD,IAAIuC,EAASjC,EACTF,EAAe,EAARE,EAAY,EACnBD,EAAQD,EAAO,EAMfA,EAAOG,IACTP,EAAWe,KAAK,CAACX,EAAMmC,EAAQ,IAC/BvC,EAAWe,KAAK,CAACX,EAAMmC,EAAQ,IAC3BxC,EAAMK,GAAQL,EAAMwC,KACtBA,EAASnC,IAMTC,EAAQE,IACVP,EAAWe,KAAK,CAACV,EAAOkC,EAAQ,IAChCvC,EAAWe,KAAK,CAACV,EAAOkC,EAAQ,IAC5BxC,EAAMM,GAASN,EAAMwC,KACvBA,EAASlC,IAMbL,EAAWe,KAAK,CAACwB,EAAQjC,EAAO,IAChCN,EAAWe,KAAK,CAACwB,EAAQjC,EAAO,IAC5BiC,IAAWjC,IACbU,EAAKjB,EAAOC,EAAYM,EAAOiC,GAE/BF,EAA0BtC,EAAOQ,EAAQgC,EAAQvC,IAwB9C,SAASwC,EAA2BzC,GACzC,IAAMC,EAAa,GACnB,OAAID,EAAMQ,OAAS,EACVR,GAMX,SAAuBA,EAAOQ,EAAQP,GACpC,IAAIY,EAAGC,EACP,IAAKD,EAAI,EAAGA,EAAIL,IAAUK,EACxB,IAAKC,EAAID,EAAGC,EAAI,GAAKd,EAAMc,EAAI,GAAKd,EAAMc,KAAMA,EAC9Cb,EAAWe,KAAK,CAACF,EAAI,EAAGA,EAAG,IAC3Bb,EAAWe,KAAK,CAACF,EAAI,EAAGA,EAAG,IAC3BG,EAAKjB,EAAOC,EAAYa,EAAGA,EAAI,GAVnC4B,CAAc1C,EAAOA,EAAMQ,OAAQP,GAC5BA,GAgBF,SAAS0C,EAAuB3C,GACrC,IAAMC,EAAa,GACnB,OAAID,EAAMQ,OAAS,EACVR,GAOX,SAAS4C,EAAU5C,EAAOK,EAAMC,EAAOL,EAAY4C,EAAQC,GACzD,GAAIxC,EAAQD,GAAQwC,GAAU,EAAG,CAC/B,IAAIhC,EAAIR,EACJS,EAAIR,EACR,EAAG,CACD,KAC8D,IAA5DyC,EAAsC/C,EAAMa,GAAIgC,IAChDhC,EAAIC,GAEJD,IAGF,KAC8D,IAA5DkC,EAAsC/C,EAAMc,GAAI+B,IAChDhC,EAAIC,GAEJA,IAEED,EAAIC,IACNb,EAAWe,KAAK,CACdH,EACAmC,EAAIhD,EAAMa,GAAGoC,SAAS,GAAI,GAAKD,EAAI,EAAGF,GACtC,EACAhC,EACAkC,EAAIhD,EAAMc,GAAGmC,SAAS,GAAI,GAAKD,EAAI,EAAGF,KAExC7C,EAAWe,KAAK,CACdH,EACAmC,EAAIhD,EAAMa,GAAGoC,SAAS,GAAI,GAAKD,EAAI,EAAGF,GACtC,EACAhC,EACAkC,EAAIhD,EAAMc,GAAGmC,SAAS,GAAI,GAAKD,EAAI,EAAGF,MAI1C7B,EAAKjB,EAAOC,EAAYY,EAAGC,SACpBA,IAAMD,GAEqD,IAAhEkC,EAAsC/C,EAAMM,GAAQuC,IACtD/B,IAEF8B,EAAU5C,EAAOK,EAAMS,EAAI,EAAGb,EAAY4C,EAAS,EAAGC,EAAiB,GACvEF,EAAU5C,EAAOc,EAAGR,EAAOL,EAAY4C,EAAS,EAAGC,EAAiB,IA/CtEF,CAAU5C,EAAO,EAAGA,EAAMQ,OAAS,EAAGP,EAAY,EAAG,GACrDiD,QAAQC,IAAInD,GACLC,GAiDT,SAAS8C,EAAsCK,EAAGtB,GAChD,OAAQsB,GAAKtB,EAAK,EAMpB,SAASkB,EAAIK,EAAGC,EAAOC,GAGrB,OAFAA,EAAIA,GAAK,KACTF,GAAQ,IACC7C,QAAU8C,EAAQD,EAAI,IAAIG,MAAMF,EAAQD,EAAE7C,OAAS,GAAGiD,KAAKF,GAAKF,ECvS3E,IAGqBK,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQD,EAAME,UAFF,E,iFAMjBC,KAAKC,SAASD,KAAKH,MAAME,a,uDAGMF,GAC/BG,KAAKC,SAASJ,EAAME,a,+BAEZ,IAAD,EACqBC,KAAKF,MAAMC,UAA/B7D,EADD,EACCA,MAAOgE,EADR,EACQA,SACTC,EAAWjE,EAAMQ,OAAS,GAAK,EAAI,GACzC,OAAOR,EAAMkE,KAAI,SAACC,EAAOC,GAAR,OACf,yBACEC,UAAU,YACVC,IAAKF,EACLG,KAAMJ,EACNK,MAAO,CACLC,OAAO,GAAD,OAAKN,EAAL,MACNb,MAAM,GAAD,OAAKW,EAAL,MACLS,gBAAiBV,EA1BN,UADC,oB,GAGiBW,a,OCHjCC,EAAgB,UAGDC,E,YACnB,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAsBRmB,cAAgB,SAAAC,GACd,IAAIC,EAAK,GACLC,EAAO,EAFW,uBAGtB,YAAgBF,EAAhB,+CAAsB,CAAC,IAAdG,EAAa,QACpBF,EAAGhE,KACD,uBACEsD,IAAKW,IACLV,KAAMQ,EAAO,EAAK/B,IAAIkC,EAAKD,GAC3BZ,UAAU,aACVG,MAAO,CACLE,gBAAiBE,IALrB,UAOKM,MAZa,kFAetB,OAAOF,GApCP,EAAKpB,MAAQD,EAAME,UACnB,EAAKb,IAAM,EAAKA,IAAImC,KAAT,gBAHM,E,iFAOjBrB,KAAKC,SAASD,KAAKH,MAAME,a,uDAGMF,GAC/BG,KAAKC,SAASJ,EAAME,a,0BAMlBR,EAAGC,EAAOC,GAGZ,OAFAA,EAAIA,GAAK,KACTF,GAAQ,IACC7C,QAAU8C,EAAQD,EAAI,IAAIG,MAAMF,EAAQD,EAAE7C,OAAS,GAAGiD,KAAKF,GAAKF,I,+BAoBjE,IAAD,SACqBS,KAAKF,MAAMC,UAA/B7D,EADD,EACCA,MAAOgE,EADR,EACQA,SACf,OACE,yBAAKK,UAAU,aACZrE,EAAMkE,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEC,UAAU,sBACVC,IAAKF,EACLG,KAAMJ,EACNK,MAAO,CACLE,gBAAiBV,EArDV,UAqDoCY,EAC3CQ,QAAS,SAGV,EAAKN,cAAc,EAAK9B,IAAImB,EAAMlB,SAAS,GAAI,a,GAvDrB0B,aCHlBU,E,iLAEjB,OAAO,kC,GAFgCV,aCGtBW,E,YACnB,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACX5D,MAAO2D,EAAME,UAAU7D,MACvBgE,SAAUL,EAAME,UAAUG,SAC1BuB,YAAa5B,EAAME,UAAU0B,aALd,E,0EASNC,GACX,OAAQA,GACN,KAAK,EACH,OAAO,kBAAC,EAAD,CAAW3B,UAAWC,KAAKH,QACpC,KAAK,EACH,OAAO,kBAAC,EAAD,CAAWE,UAAWC,KAAKH,QACpC,KAAK,EACH,OAAO,kBAAC,EAAD,CAAeE,UAAWC,KAAKH,QACxC,QACE,OAAO,kBAAC,EAAD,CAAWE,UAAWC,KAAKH,W,+BAItC,OAAO,6BAAMG,KAAK2B,aAAa3B,KAAKH,MAAME,UAAU0B,kB,GAvBfZ,aCoBpBe,E,YACnB,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KA8QRgC,SAAW,SAAAC,GAET,GADAA,EAAEC,UACoB,mBAAlBD,EAAEE,OAAOvB,KACX,EAAKR,SAAL,eAAiB6B,EAAEE,OAAOvB,KAAOqB,EAAEE,OAAO3B,YACrC,CACL,IAAI4B,EACgB,cAAlBH,EAAEE,OAAOvB,KACL,KACAqB,EAAEE,OAAOvB,KACT,IAEN,EAAKR,SAAL,eAEK6B,EAAEE,OAAOvB,KACRqB,EAAEE,OAAO3B,OAAS4B,EAAWH,EAAEE,OAAO3B,MAAQ4B,IAElD,WACwB,cAAlBH,EAAEE,OAAOvB,MAAwBqB,EAAEE,OAAO3B,OAAS4B,EACrD,EAAKC,YAEa,oBAAlBJ,EAAEE,OAAOvB,MACTqB,EAAEE,OAAO3B,OAAS4B,GAElB,EAAKE,uBApSb,EAAKrC,MAAQ,CACXsC,eAAgB,EAChBC,YAAY,EACZnC,UAAU,EACVhE,MAAO,GACPoG,UAAW,IACXC,gBAAiB,GACjBL,UAAW,EAAKA,UAChBT,YAAa,EACbjB,IAAK,EACLgC,MAAO,8BACPC,SAAU,uDAbK,E,iFAkBjBzC,KAAK0C,uBAAuBC,OAAOC,YACnCD,OAAOE,iBAAiB,SAAU7C,KAAK8C,OAAOzB,KAAKrB,OACnDA,KAAK8C,W,6CAILH,OAAOI,oBAAoB,SAAU/C,KAAK8C,U,+BAI1C,IAAME,EAAcL,OAAOC,WAC3B5C,KAAK0C,uBAAuBM,K,wCAM5B,IAFA,IAAM9G,EAAQ,GACRsE,EAAMR,KAAKF,MAAMU,IACdzD,EAAI,EAAGA,EAAIiD,KAAKF,MAAMyC,gBAAiBxF,IAAK,CACnD,IAAIsD,EAAQ4C,EAA0B,EAAG,IACxC/G,EAAMgH,SAAS7C,GAA6BtD,IAApBb,EAAMgB,KAAKmD,GAEtCL,KAAKC,SAAS,CACZ/D,QACAgE,UAAU,EACVuB,YAAa,EACbW,eAAgB,IAChBF,UAAWlC,KAAKmC,gBAChB3B,IAAKA,EAAM,EACXgC,MAAO,qCACPC,SAAU,0D,kCAOZ,IAFA,IAAMvG,EAAQ,GACRsE,EAAMR,KAAKF,MAAMU,IACdzD,EAAI,EAAGA,EAAIiD,KAAKF,MAAMwC,UAAWvF,IACxCb,EAAMgB,KAAK+F,EAA0B,EAAG,MAE1CjD,KAAKC,SAAS,CACZ/D,QACAgE,UAAU,EACVuB,YAAa,EACbS,UAAWlC,KAAKkC,UAChB1B,IAAKA,EAAM,EACXgC,MAAO,8BACPC,SAAU,0D,6CAGSO,GAAc,IAAD,OAC9BA,EAAc,MAAQA,EAAc,IACtChD,KAAKC,SACH,CACEqC,UAAWW,EAA0B,EAAG,IACxC/C,UAAU,IAEZ,WACE,EAAKgC,eAGAc,EAAc,IACvBhD,KAAKC,SACH,CACEqC,UAAWW,EAA0B,EAAG,IACxC/C,UAAU,IAEZ,WACE,EAAKgC,eAG4B,IAA5BlC,KAAKF,MAAM5D,MAAMQ,QAC1BsD,KAAKkC,c,wCAKPlC,KAAKC,SAAS,CACZoC,YAAY,EACZnC,UAAU,EACVsC,MAAO,YACPC,SACE,6IAOJ,IALA,IAAML,EAAiBpC,KAAKF,MAAMsC,eAC5B3E,EAAiBuC,KAAKF,MAAM5D,MAAMwB,QAClCvB,EAAakC,EAAsBZ,GACnC0F,EAAmBhH,EAAWO,OAChC0G,EAAY,EACPrG,EAAI,EAAGA,EAAIoG,EAAkBpG,IACpCiD,KAAKqD,cACHlH,EACAsB,EACA2E,EACAe,EACApG,EACAqG,IA/Hc,UAEE,a,oCAqIpBjH,EACAsB,EACA2E,EACAe,EACApG,EACAqG,EACAE,EACAC,GACC,IAAD,OACMC,EAAWC,SAASC,uBAAuB,aADjD,cAEkDvH,EAAWY,GAF7D,GAEO4G,EAFP,KAEkBC,EAFlB,KAGA,GAAsB,IAHtB,KAGyB,CACvB,IAAMC,EAAcL,EAASG,GAAWjD,MAClCoD,EAAcN,EAASI,GAAelD,MACtCqD,EAAQhH,EAAI,IAAM,EAAIwG,EAAkBD,EAC9CU,YAAW,WACTZ,IACAS,EAAYjD,gBAAkBmD,EAC9BD,EAAYlD,gBAAkBmD,EAC1BX,IAAcD,GAChB,EAAKlD,SAAS,CACZoC,YAAY,EACZnG,MAAOuB,EACPyC,UAAU,MAGbnD,EAAIqF,QAEP4B,YAAW,WACTZ,IACoBI,EAASG,GAAWjD,MAC5BC,OAAZ,UAAwBiD,EAAxB,MACiBH,SAASQ,kBAAT,UAA8BL,IAAiB,GACvDM,aAAa,OAAQV,EAASG,GAAWQ,aAAa,SAC/DX,EAASG,GAAWO,aAAa,OAAjC,UAA4CN,IACxCR,IAAcD,GAChB,EAAKlD,SAAS,CACZoC,YAAY,EACZnG,MAAOuB,EACPyC,UAAU,MAGbnD,EAAIqF,K,yCAIS,IAAD,OACjBpC,KAAKC,SAAS,CACZoC,YAAY,EACZnC,UAAU,EACVsC,MAAO,aACPC,SACE,sKAOJ,IALA,IAAML,EAAiBpC,KAAKF,MAAMsC,eAC5B3E,EAAiBuC,KAAKF,MAAM5D,MAAMwB,QAClCvB,EAAaqB,EAAuBC,GACpC0F,EAAmBhH,EAAWO,OAChC0G,EAAY,EAZC,WAaRrG,GACP,IAAMyG,EAAWC,SAASC,uBAAuB,aAEjD,GADsB3G,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACV4G,EADU,KACCS,EADD,KAEXP,EAAcL,EAASG,GAAWjD,MAClCoD,EAAcN,EAASY,GAAW1D,MAClCqD,EAAQhH,EAAI,IAAM,EAvMR,UAFF,UA0MdiH,YAAW,WACTZ,IACAS,EAAYjD,gBAAkBmD,EAC9BD,EAAYlD,gBAAkBmD,IAC7BhH,EAAIqF,QAEP4B,YAAW,WACTZ,IADe,kBAEgBjH,EAAWY,GAF3B,GAER4G,EAFQ,KAEGU,EAFH,KAGKb,EAASG,GAAWjD,MAC5BC,OAAZ,UAAwB0D,EAAxB,MACiBZ,SAASQ,kBAAT,UAA8BI,IAAa,GACnDH,aACP,OACAV,EAASG,GAAWQ,aAAa,SAEnCX,EAASG,GAAWO,aAAa,OAAjC,UAA4CG,IACxCjB,IAAcD,GAChB,EAAKlD,SAAS,CACZoC,YAAY,EACZnG,MAAOuB,EACPyC,UAAU,MAGbnD,EAAIqF,IAhCFrF,EAAI,EAAGA,EAAIoG,EAAkBpG,IAAM,EAAnCA,K,yCAsCTiD,KAAKC,SAAS,CACZoC,YAAY,EACZnC,UAAU,EACVsC,MAAO,aACPC,SACE,mMAOJ,IALA,IAAML,EAAiBpC,KAAKF,MAAMsC,eAC5B3E,EAAiBuC,KAAKF,MAAM5D,MAAMwB,QAClCvB,EAAaF,EAAuBwB,GACpC0F,EAAmBhH,EAAWO,OAChC0G,EAAY,EACPrG,EAAI,EAAGA,EAAIoG,EAAkBpG,IACpCiD,KAAKqD,cACHlH,EACAsB,EACA2E,EACAe,EACApG,EACAqG,IA3Pc,UAWF,Y,0CAwPhBpD,KAAKC,SAAS,CACZoC,YAAY,EACZnC,UAAU,EACVsC,MAAO,cACPC,SACE,4HAOJ,IALA,IAAML,EAAiBpC,KAAKF,MAAMsC,eAC5B3E,EAAiBuC,KAAKF,MAAM5D,MAAMwB,QAClCvB,EAAa+B,EAAwBT,GACrC0F,EAAmBhH,EAAWO,OAChC0G,EAAY,EACPrG,EAAI,EAAGA,EAAIoG,EAAkBpG,IACpCiD,KAAKqD,cACHlH,EACAsB,EACA2E,EACAe,EACApG,EACAqG,IAtRc,UAEE,a,6CA0TpBpD,KAAKC,SAAS,CACZoC,YAAY,EACZnC,UAAU,EACVsC,MAAO,iBACPC,SACE,8HAOJ,IALA,IAAML,EAAiBpC,KAAKF,MAAMsC,eAC5B3E,EAAiBuC,KAAKF,MAAM5D,MAAMwB,QAClCvB,EAAawC,EAA2BlB,GACxC0F,EAAmBhH,EAAWO,OAChC0G,EAAY,EACPrG,EAAI,EAAGA,EAAIoG,EAAkBpG,IACpCiD,KAAKqD,cACHlH,EACAsB,EACA2E,EACAe,EACApG,EACAqG,IA/Uc,UAEE,a,yCAsVF,IAAD,OACjBpD,KAAKC,SAAS,CACZoC,YAAY,EACZnC,UAAU,EACVsC,MAAO,aACPC,SACE,sHAOJ,IALA,IAAML,EAAiBpC,KAAKF,MAAMsC,eAC5B3E,EAAiBuC,KAAKF,MAAM5D,MAAMwB,QAClCvB,EAAa0C,EAAuBpB,GACpC0F,EAAmBhH,EAAWO,OAChC0G,EAAY,EAZC,WAaRrG,GAbQ,kBAoBXZ,EAAWY,GApBA,GAebuH,EAfa,KAgBbC,EAhBa,KAiBbC,EAjBa,KAmBbC,GAnBa,WAsBO,IAAlBD,EACFR,YAAW,WAET,IAIMU,EAJuBjB,SAASQ,kBACpCM,GACA,GAEqC7D,MAMjCiE,EAJuBlB,SAASQ,kBACpCQ,GACA,GAEqC/D,MAKjCkE,EAAa7H,EAAI,IAAM,EA1XrB,UANI,UAqYN8H,EAAa9H,EAAI,IAAM,EA/XrB,UANI,UAsYZqG,IAEAsB,EAAU9D,gBAAkBgE,EAE5BD,EAAU/D,gBAAkBiE,IAC3B9H,EAAIqF,GAEP4B,YAAW,WACT,IAAMc,EAAYrB,SAASC,uBAAuB,gBAClDN,IACA,IAAM2B,EAAatB,SAASQ,kBAAkBM,GAAa,GACrDS,EAAaF,EAAUR,GACvBW,EAAiBF,EAAWZ,aAAa,QAC/CY,EAAWb,aAAa,OAAQc,EAAWb,aAAa,SACxDa,EAAWd,aAAa,OAAQe,GAEhC,IAAMC,EAAYF,EAAWE,UAC7BF,EAAWE,UAAYH,EAAWG,UAClCH,EAAWG,UAAYA,EACnB9B,IAAcD,GAChB,EAAKlD,SAAS,CACZoC,YAAY,EACZnG,MAAOuB,EACPyC,UAAU,MAGbnD,EAAIqF,IA3DFrF,EAAI,EAAGA,EAAIoG,EAAkBpG,IAAM,EAAnCA,K,oCAiETiD,KAAKmC,oB,+BAGG,IAAD,SAaHnC,KAAKF,MAXP5D,EAFK,EAELA,MACAmG,EAHK,EAGLA,WACAD,EAJK,EAILA,eACAE,EALK,EAKLA,UACAC,EANK,EAMLA,gBACArC,EAPK,EAOLA,SAEAuB,GATK,EAQLS,UARK,EASLT,aACAjB,EAVK,EAULA,IACAgC,EAXK,EAWLA,MACAC,EAZK,EAYLA,SAEI0C,EACJ,wBACE5E,UAAU,wCACV6E,kBAAgB,iBAChBC,SAAUhD,GAEV,4BACE,4BACE9B,UAAU,sCACV+E,QAAS,kBAAM,EAAKC,oBACpBF,SAAUhD,GAHZ,cAQF,4BACE,4BACE9B,UAAU,sCACV+E,QAAS,kBAAM,EAAKE,oBACpBH,SAAUhD,GAHZ,cAQF,4BACE,4BACEoD,KAAK,IACLlF,UAAU,sCACV+E,QAAS,kBAAM,EAAKI,mBACpBL,SAAUhD,GAJZ,aASF,4BACE,4BACEoD,KAAK,IACLlF,UAAU,6CACV+E,QAAS,kBAAM,EAAKK,qBACpBN,SAAUhD,GAJZ,eASF,4BACE,4BACEoD,KAAK,IACLlF,UAAU,6CACV+E,QAAS,kBAAM,EAAKM,wBACpBP,SAAUhD,GAJZ,mBAWAwD,EACJ,wBACEtF,UAAU,wCACV6E,kBAAgB,kBAEhB,wBAAI7E,UAAU,qBACZ,4BACEA,UAAU,sCACV+E,QAAS,kBAAM,EAAKQ,oBACpBT,SAAUhD,GAHZ,eAUN,OACE,kBAAC,WAAD,KACE,yBACE0D,GAAG,SACHxF,UAAS,2DACTG,MAAO,CAAEsF,OAAQ,IAAKxG,MAAO,SAE7B,uBAAGe,UAAU,eAAekF,KAAK,KAC/B,yBACEM,GAAG,WACHE,IAAI,gBACJC,IAAI,0BACJvF,OAAO,OACPnB,MAAM,UAGV,4BACEe,UAAU,iBACV4F,KAAK,SACLC,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMjG,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BwF,GAAG,uBAC3C,wBAAIxF,UAAU,mCACZ,wBAAIA,UAAU,YACZ,yBAAKA,UAAU,kBACb,2BAAOkG,QAAQ,iBAAiBlG,UAAU,IAA1C,0BAGA,2BACEA,UAAU,eACV4F,KAAK,SACLJ,GAAG,iBACHtF,KAAK,iBACLJ,MAAO+B,EACPP,SAAU7B,KAAK6B,SACfwD,SAAUhD,MAIhB,wBAAI9B,UAAU,YACZ,yBAAKA,UAAU,kBACb,2BAAOkG,QAAQ,YAAYlG,UAAU,IAArC,qBAGA,2BACEA,UAAU,eACV4F,KAAK,SACLO,IAAI,MACJC,IAAI,IACJZ,GAAG,YACHtF,KACkB,IAAhBgB,EACI,YACgB,IAAhBA,EACA,kBACA,GAENpB,MACkB,IAAhBoB,EACIa,EACgB,IAAhBb,EACAc,EACA,GAENV,SAAU7B,KAAK6B,SACfwD,SAAUhD,MAIhB,wBAAI9B,UAAU,gDACZ,4BACEA,UAAU,+CACVwF,GAAG,iBACHK,cAAY,WACZQ,gBAAc,OACdL,gBAAc,QACdlB,SAAUhD,GANZ,eAUA,wBACE9B,UAAU,wCACV6E,kBAAgB,kBAEhB,4BACE,4BACE7E,UAAU,sCACV+E,QAAS,kBAAM,EAAKpD,cAFtB,iBAOF,4BACE,4BACE3B,UAAU,sCACV+E,QAAS,kBAAM,EAAKuB,gBAFtB,mBASN,wBAAItG,UAAU,oBACZ,4BACEA,UAAU,+BACV+E,QAAS,kBACS,IAAhB7D,EACI,EAAKS,YACW,IAAhBT,EACA,EAAKU,kBACL,IAENkD,SAAUhD,GATZ,uBAcF,wBAAI9B,UAAU,gDACZ,4BACEA,UAAU,+CACVwF,GAAG,iBACHK,cAAY,WACZQ,gBAAc,OACdL,gBAAc,QACdlB,SAAUhD,GAEO,IAAhBZ,EACG,oBACgB,IAAhBA,EACA,mBACA,uBAEW,IAAhBA,EACG0D,EACAU,MAKZ,yBACEtF,UAAS,gDACS,IAAhBkB,EAAoB,aAAe,sBAGrC,yBAAKlB,UAAU,+BACb,wBAAIA,UAAU,cAAciC,GAC5B,wBAAIjC,UAAU,mBAAmBkC,QACtBqE,IAAV5K,GAAuBA,EAAMQ,OAAS,EACrC,kBAAC,EAAD,CACE8D,IAAKA,EACLT,UAAW,CAAE7D,QAAOgE,WAAUuB,iBAGhC,+C,GAjpB8BZ,aA0pB5C,SAASoC,EAA0B0D,EAAKD,GACtC,OAAO9J,KAAKC,MAAMD,KAAKmK,UAAYL,EAAMC,EAAM,GAAKA,G,MCtqBvCK,MAVf,WACE,OACE,yBAAKzG,UAAU,OACb,kBAAC,WAAD,KACE,kBAAC,EAAD,SCIY0G,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7D,SAAS8D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a1e35e1.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.lenght < 1) {\r\n    return array;\r\n  }\r\n  quickSort(array, animations, 0, array.length - 1);\r\n  return animations;\r\n}\r\n\r\nfunction swap(items, animations, leftIndex, rightIndex) {\r\n  // push the index and the height of the element we swap\r\n  animations.push([leftIndex, items[rightIndex], 0]);\r\n  animations.push([rightIndex, items[leftIndex], 0]);\r\n  let temp = items[leftIndex];\r\n  items[leftIndex] = items[rightIndex];\r\n  items[rightIndex] = temp;\r\n}\r\nfunction partition(items, animations, left, right) {\r\n  let middleCoord = Math.floor((right + left) / 2);\r\n  let pivot = items[middleCoord],\r\n    i = left,\r\n    j = right;\r\n  while (i <= j) {\r\n    middleCoord = items.indexOf(pivot);\r\n    while (items[i] < pivot) {\r\n      animations.push([i, middleCoord, 1]);\r\n      animations.push([i, middleCoord, 1]);\r\n      i++;\r\n    }\r\n    while (items[j] > pivot) {\r\n      animations.push([j, middleCoord, 1]);\r\n      animations.push([j, middleCoord, 1]);\r\n      j--;\r\n    }\r\n    if (i <= j) {\r\n      swap(items, animations, i, j);\r\n      i++;\r\n      j--;\r\n    }\r\n  }\r\n  return i;\r\n}\r\n\r\nfunction quickSort(items, animations, left, right) {\r\n  var index;\r\n  if (items.length > 1) {\r\n    index = partition(items, animations, left, right);\r\n    if (left < index - 1) {\r\n      quickSort(items, animations, left, index - 1);\r\n    }\r\n    if (index < right) {\r\n      quickSort(items, animations, index, right);\r\n    }\r\n  }\r\n  return items;\r\n}\r\n\r\n// algorithm from algoexpert.com for optimized merge sort\r\nexport function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j, 1]);\r\n    animations.push([i, j, 1]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i], 0]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j], 0]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i, 1]);\r\n    animations.push([i, i, 1]);\r\n    animations.push([k, auxiliaryArray[i], 0]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j, 1]);\r\n    animations.push([j, j, 1]);\r\n    animations.push([k, auxiliaryArray[j], 0]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n\r\n  bubbleSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(array, arrayLength, animations) {\r\n  for (let i = 0; i < arrayLength; i++) {\r\n    for (let j = 0; j < arrayLength - 1 - i; j++) {\r\n      animations.push([j, j + 1, 1]);\r\n      animations.push([j, j + 1, 1]);\r\n      if (array[j] > array[j + 1]) {\r\n        swap(array, animations, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* ***************\r\n    HEAP SORT\r\n *************** */\r\n\r\nexport function getHeapSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  heapSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction compareParentWithChildren(array, length, index, animations) {\r\n  let parent = index;\r\n  let left = index * 2 + 1;\r\n  let right = left + 1;\r\n  /* check if left child is greater. If it is\r\n   * parent will take its index.\r\n   * check if left is smaller than length\r\n   * in order to not compare with already sorted nodes\r\n   */\r\n  if (left < length) {\r\n    animations.push([left, parent, 1]);\r\n    animations.push([left, parent, 1]);\r\n    if (array[left] > array[parent]) {\r\n      parent = left;\r\n    }\r\n  }\r\n  /* check if right child is greater. If it is\r\n   * parent will take its index\r\n   */\r\n  if (right < length) {\r\n    animations.push([right, parent, 1]);\r\n    animations.push([right, parent, 1]);\r\n    if (array[right] > array[parent]) {\r\n      parent = right;\r\n    }\r\n  }\r\n  /* check if we found another value greater than initial parent\r\n   * swap values and recall function\r\n   */\r\n  animations.push([parent, index, 1]);\r\n  animations.push([parent, index, 1]);\r\n  if (parent !== index) {\r\n    swap(array, animations, index, parent);\r\n    /* check if nodes below are still in right order */\r\n    compareParentWithChildren(array, length, parent, animations);\r\n  }\r\n}\r\n\r\nfunction heapSort(array, length, animations) {\r\n  let indexOfLastParent = Math.floor(length / 2 - 1);\r\n  let indexOfLastChild = length - 1;\r\n\r\n  while (indexOfLastParent >= 0) {\r\n    compareParentWithChildren(array, length, indexOfLastParent, animations);\r\n    indexOfLastParent--;\r\n  }\r\n  while (indexOfLastChild >= 0) {\r\n    /* swap root with last child because it is sorted */\r\n    swap(array, animations, 0, indexOfLastChild);\r\n    compareParentWithChildren(array, indexOfLastChild, 0, animations);\r\n    indexOfLastChild--;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/* STRAIGHT INSERTION */\r\n\r\nexport function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  insertionSort(array, array.length, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(array, length, animations) {\r\n  let i, j;\r\n  for (i = 1; i < length; ++i) {\r\n    for (j = i; j > 0 && array[j - 1] > array[j]; --j) {\r\n      animations.push([j - 1, j, 1]);\r\n      animations.push([j - 1, j, 1]);\r\n      swap(array, animations, j, j - 1);\r\n    }\r\n  }\r\n}\r\n\r\n/* RADIX SORT */\r\n\r\nexport function getRadixSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length < 2) {\r\n    return array;\r\n  }\r\n  radixSort(array, 0, array.length - 1, animations, 5, 1);\r\n  console.log(array);\r\n  return animations;\r\n}\r\n\r\nfunction radixSort(array, left, right, animations, nrBits, paddingForName) {\r\n  if (right > left && nrBits >= 0) {\r\n    let i = left;\r\n    let j = right;\r\n    do {\r\n      while (\r\n        jBitsThatAppearKBitPositionsFromRight(array[i], nrBits) === 0 &&\r\n        i < j\r\n      ) {\r\n        i++;\r\n      }\r\n\r\n      while (\r\n        jBitsThatAppearKBitPositionsFromRight(array[j], nrBits) === 1 &&\r\n        i < j\r\n      ) {\r\n        j--;\r\n      }\r\n      if (i < j) {\r\n        animations.push([\r\n          i,\r\n          pad(array[i].toString(2), 6) + pad(1, paddingForName),\r\n          1,\r\n          j,\r\n          pad(array[j].toString(2), 6) + pad(0, paddingForName)\r\n        ]);\r\n        animations.push([\r\n          i,\r\n          pad(array[i].toString(2), 6) + pad(1, paddingForName),\r\n          1,\r\n          j,\r\n          pad(array[j].toString(2), 6) + pad(0, paddingForName)\r\n        ]);\r\n      }\r\n\r\n      swap(array, animations, i, j);\r\n    } while (j !== i);\r\n\r\n    if (jBitsThatAppearKBitPositionsFromRight(array[right], nrBits) === 0) {\r\n      j++;\r\n    }\r\n    radixSort(array, left, j - 1, animations, nrBits - 1, paddingForName + 1);\r\n    radixSort(array, j, right, animations, nrBits - 1, paddingForName + 1);\r\n  }\r\n}\r\n\r\nfunction jBitsThatAppearKBitPositionsFromRight(x, k) {\r\n  return (x >> k) & 1;\r\n}\r\n\r\n/* SPECIAL THANKS TO POINTY FROM  STACK OVERFLOW\r\nhttps://stackoverflow.com/a/10073788/11023871\r\n*/\r\nfunction pad(n, width, z) {\r\n  z = z || \"0\";\r\n  n = n + \"\";\r\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nconst PRIMARY_COLOR = \"#c2e8ce\";\r\nconst SORTED_COLOR = \"#f6ad7b\";\r\n\r\nexport default class ArrayBars extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = props.arrayInfo;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this.props.arrayInfo);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    this.setState(props.arrayInfo);\r\n  }\r\n  render() {\r\n    const { array, isSorted } = this.state.arrayInfo;\r\n    const barWidth = array.length > 90 ? 3 : 10;\r\n    return array.map((value, idx) => (\r\n      <div\r\n        className=\"array-bar\"\r\n        key={idx}\r\n        name={value}\r\n        style={{\r\n          height: `${value}px`,\r\n          width: `${barWidth}px`,\r\n          backgroundColor: isSorted ? SORTED_COLOR : PRIMARY_COLOR\r\n        }}\r\n      ></div>\r\n    ));\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nconst PRIMARY_COLOR = \"#c2e8ce\";\r\nconst SORTED_COLOR = \"#f6ad7b\";\r\n\r\nexport default class BinaryRep extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = props.arrayInfo;\r\n    this.pad = this.pad.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this.props.arrayInfo);\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    this.setState(props.arrayInfo);\r\n  }\r\n\r\n  /* SPECIAL THANKS TO POINTY FROM  STACK OVERFLOW\r\n  https://stackoverflow.com/a/10073788/11023871\r\n  */\r\n  pad(n, width, z) {\r\n    z = z || \"0\";\r\n    n = n + \"\";\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n  }\r\n\r\n  createBitDivs = bits => {\r\n    let ps = [];\r\n    var keys = 0;\r\n    for (let bit of bits) {\r\n      ps.push(\r\n        <p\r\n          key={keys++}\r\n          name={bits + this.pad(bit, keys)}\r\n          className=\"col-2 bits\"\r\n          style={{\r\n            backgroundColor: PRIMARY_COLOR\r\n          }}\r\n        >{`${bit}`}</p>\r\n      );\r\n    }\r\n    return ps;\r\n  };\r\n  render() {\r\n    const { array, isSorted } = this.state.arrayInfo;\r\n    return (\r\n      <div className=\"row mt-5 \">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-binary col-12\"\r\n            key={idx}\r\n            name={value}\r\n            style={{\r\n              backgroundColor: isSorted ? SORTED_COLOR : PRIMARY_COLOR,\r\n              display: \"flex\"\r\n            }}\r\n          >\r\n            {this.createBitDivs(this.pad(value.toString(2), 6))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class CharactersRep extends Component {\r\n  render() {\r\n    return <div></div>;\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ArrayBars from \"./ArrayBars\";\r\nimport BinaryRep from \"./BinaryRep\";\r\nimport CharactersRep from \"./CharactersRep\";\r\n\r\nexport default class Visualizers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: props.arrayInfo.array,\r\n      isSorted: props.arrayInfo.isSorted,\r\n      sortingType: props.arrayInfo.sortingType\r\n    };\r\n  }\r\n\r\n  renderSwitch(switchingParam) {\r\n    switch (switchingParam) {\r\n      case 0:\r\n        return <ArrayBars arrayInfo={this.props}></ArrayBars>;\r\n      case 1:\r\n        return <BinaryRep arrayInfo={this.props}></BinaryRep>;\r\n      case 2:\r\n        return <CharactersRep arrayInfo={this.props}></CharactersRep>;\r\n      default:\r\n        return <ArrayBars arrayInfo={this.props}></ArrayBars>;\r\n    }\r\n  }\r\n  render() {\r\n    return <div>{this.renderSwitch(this.props.arrayInfo.sortingType)}</div>;\r\n  }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  getQuickSortAnimations,\r\n  getMergeSortAnimations,\r\n  getBubbleSortAnimations,\r\n  getHeapSortAnimations,\r\n  getInsertionSortAnimations,\r\n  getRadixSortAnimations\r\n} from \"../AlgorithmsSorts/AlgorithmsSorts.js\";\r\nimport Visualizers from \"./Visualizers.jsx\";\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = \"#c2e8ce\";\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = \"#be7575\";\r\n// This is the color of the array bars that are sorted\r\nconst SORTED_COLOR = \"#f6ad7b\";\r\n// This is the color of the bits\r\nconst BIT_COLOR = \"#F6AD7B\";\r\nconst BIT_COLOR_RGB = \"rgb(246, 173, 123)\";\r\nconst SORTED_COLOR_RGB = \"rgb(246, 173, 123)\";\r\nconst PRIMARY_COLOR_RGB = \"rgb(194, 232, 206)\";\r\n// This is the color of the pivot\r\nconst PIVOT_COLOR = \"yellow\";\r\n\r\nexport default class VisualizeSorts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      animationSpeed: 1,\r\n      isAnimated: false,\r\n      isSorted: false,\r\n      array: [],\r\n      arraySize: 200,\r\n      binaryArraySize: 15,\r\n      initArray: this.initArray,\r\n      sortingType: 0, // 0 = numbers, 1 = binary, 2 = string search\r\n      key: 0,\r\n      title: \"Sorting methods for numbers\",\r\n      subTitle: \"Select a sorting type and a method for more details\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initArrayOnWindowWidth(window.innerWidth);\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    this.resize();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.resize);\r\n  }\r\n\r\n  resize() {\r\n    const windowWidth = window.innerWidth;\r\n    this.initArrayOnWindowWidth(windowWidth);\r\n  }\r\n\r\n  initBinaryArray() {\r\n    const array = [];\r\n    const key = this.state.key;\r\n    for (let i = 0; i < this.state.binaryArraySize; i++) {\r\n      let value = randomIntegerFromInterval(1, 63);\r\n      !array.includes(value) ? array.push(value) : i--;\r\n    }\r\n    this.setState({\r\n      array,\r\n      isSorted: false,\r\n      sortingType: 1,\r\n      animationSpeed: 250,\r\n      initArray: this.initBinaryArray,\r\n      key: key + 1,\r\n      title: \"Sorting methods for binary numbers\",\r\n      subTitle: \"Select a sorting type and a method for more details\"\r\n    });\r\n  }\r\n\r\n  initArray() {\r\n    const array = [];\r\n    const key = this.state.key;\r\n    for (let i = 0; i < this.state.arraySize; i++) {\r\n      array.push(randomIntegerFromInterval(5, 600));\r\n    }\r\n    this.setState({\r\n      array,\r\n      isSorted: false,\r\n      sortingType: 0,\r\n      initArray: this.initArray,\r\n      key: key + 1,\r\n      title: \"Sorting methods for numbers\",\r\n      subTitle: \"Select a sorting type and a method for more details\"\r\n    });\r\n  }\r\n  initArrayOnWindowWidth(windowWidth) {\r\n    if (windowWidth < 1260 && windowWidth > 568) {\r\n      this.setState(\r\n        {\r\n          arraySize: randomIntegerFromInterval(5, 40),\r\n          isSorted: false\r\n        },\r\n        () => {\r\n          this.initArray();\r\n        }\r\n      );\r\n    } else if (windowWidth < 568) {\r\n      this.setState(\r\n        {\r\n          arraySize: randomIntegerFromInterval(5, 20),\r\n          isSorted: false\r\n        },\r\n        () => {\r\n          this.initArray();\r\n        }\r\n      );\r\n    } else if (this.state.array.length === 0) {\r\n      this.initArray();\r\n    }\r\n  }\r\n\r\n  animateHeapSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Heap Sort\",\r\n      subTitle:\r\n        \"Heap sort is based on the repeated selection of the biggest key among items using at every step a maximal heap of the remaining elements\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getHeapSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  animateColors(\r\n    animations,\r\n    auxiliaryArray,\r\n    animationSpeed,\r\n    animationsLength,\r\n    i,\r\n    nrTimeout,\r\n    primary_color,\r\n    secondary_color\r\n  ) {\r\n    const arrayBar = document.getElementsByClassName(\"array-bar\");\r\n    const [barOneIdx, indexOrHeight, isComparisson] = animations[i];\r\n    if (isComparisson === 1) {\r\n      const barOneStyle = arrayBar[barOneIdx].style;\r\n      const barTwoStyle = arrayBar[indexOrHeight].style;\r\n      const color = i % 2 === 0 ? secondary_color : primary_color;\r\n      setTimeout(() => {\r\n        nrTimeout++;\r\n        barOneStyle.backgroundColor = color;\r\n        barTwoStyle.backgroundColor = color;\r\n        if (nrTimeout === animationsLength) {\r\n          this.setState({\r\n            isAnimated: false,\r\n            array: auxiliaryArray,\r\n            isSorted: true\r\n          });\r\n        }\r\n      }, i * animationSpeed);\r\n    } else {\r\n      setTimeout(() => {\r\n        nrTimeout++;\r\n        const barOneStyle = arrayBar[barOneIdx].style;\r\n        barOneStyle.height = `${indexOrHeight}px`;\r\n        const barPivot = document.getElementsByName(`${indexOrHeight}`)[0];\r\n        barPivot.setAttribute(\"name\", arrayBar[barOneIdx].getAttribute(\"name\"));\r\n        arrayBar[barOneIdx].setAttribute(\"name\", `${indexOrHeight}`);\r\n        if (nrTimeout === animationsLength) {\r\n          this.setState({\r\n            isAnimated: false,\r\n            array: auxiliaryArray,\r\n            isSorted: true\r\n          });\r\n        }\r\n      }, i * animationSpeed);\r\n    }\r\n  }\r\n\r\n  animateMergeSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Merge Sort\",\r\n      subTitle:\r\n        \"Merge sort works on the principle of its name: 'merging'. We split the elements in smaller subsets until we get 1 element and then we start merging them in order\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getMergeSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const arrayBar = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBar[barOneIdx].style;\r\n        const barTwoStyle = arrayBar[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          nrTimeout++;\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBar[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n          const barPivot = document.getElementsByName(`${newHeight}`)[0];\r\n          barPivot.setAttribute(\r\n            \"name\",\r\n            arrayBar[barOneIdx].getAttribute(\"name\")\r\n          );\r\n          arrayBar[barOneIdx].setAttribute(\"name\", `${newHeight}`);\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({\r\n              isAnimated: false,\r\n              array: auxiliaryArray,\r\n              isSorted: true\r\n            });\r\n          }\r\n        }, i * animationSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateQuickSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Quick Sort\",\r\n      subTitle:\r\n        \"Quick sort works on selecting a pivot (middle elem. in our case) and putting all smaller elem. before it and bigger elem. after it, splitting afterwards in two halves, continuing the process\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getQuickSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        PIVOT_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  animateBubbleSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Bubble Sort\",\r\n      subTitle:\r\n        \"Bubble sort compares everytime 2 neighboring elements, putting after one iteration the biggest element found at the end\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getBubbleSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  onChange = e => {\r\n    e.persist();\r\n    if (e.target.name === \"animationSpeed\") {\r\n      this.setState({ [e.target.name]: e.target.value });\r\n    } else {\r\n      let maxValue =\r\n        e.target.name === \"arraySize\"\r\n          ? 200\r\n          : e.target.name === \"binaryArraySize\"\r\n          ? 20\r\n          : 20;\r\n      this.setState(\r\n        {\r\n          [e.target.name]:\r\n            e.target.value <= maxValue ? e.target.value : maxValue\r\n        },\r\n        () => {\r\n          if (e.target.name === \"arraySize\" && e.target.value <= maxValue) {\r\n            this.initArray();\r\n          } else if (\r\n            e.target.name === \"binaryArraySize\" &&\r\n            e.target.value <= maxValue\r\n          ) {\r\n            this.initBinaryArray();\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  animateInsertionSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Insertion Sort\",\r\n      subTitle:\r\n        \"Insertion sort always puts the ith element into its appropiate position, resulting in i - 1 sorted elements on every step\"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getInsertionSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      this.animateColors(\r\n        animations,\r\n        auxiliaryArray,\r\n        animationSpeed,\r\n        animationsLength,\r\n        i,\r\n        nrTimeout++,\r\n        PRIMARY_COLOR,\r\n        SECONDARY_COLOR\r\n      );\r\n    }\r\n  }\r\n\r\n  // ADD VALUES DIFFERENTLY. IT ONLY COLORS 1 BLOCK. IT NEEDS TO COLOR 2!\r\n\r\n  animateRadixSort() {\r\n    this.setState({\r\n      isAnimated: true,\r\n      isSorted: false,\r\n      title: \"Radix sort\",\r\n      subTitle:\r\n        \"Radix exchange sort finishes when all keys that begin with a 0 bit come before all keys that begin with a 1 bit. \"\r\n    });\r\n    const animationSpeed = this.state.animationSpeed;\r\n    const auxiliaryArray = this.state.array.slice();\r\n    const animations = getRadixSortAnimations(auxiliaryArray);\r\n    const animationsLength = animations.length;\r\n    let nrTimeout = 0;\r\n    for (let i = 0; i < animationsLength; i++) {\r\n      const [\r\n        NumberIdx,\r\n        nameOrIndex,\r\n        isComparisson,\r\n        NumberIdxJ,\r\n        nameOrIndexJ\r\n      ] = animations[i];\r\n\r\n      if (isComparisson === 1) {\r\n        setTimeout(() => {\r\n          // const arrayBits = document.getElementsByClassName(\"array-binary\");\r\n          const arrayIndividualBitsI = document.getElementsByName(\r\n            nameOrIndex\r\n          )[0];\r\n          // const NumberStyleI = arrayBits[NumberIdx].style;\r\n          const BitStyleI = arrayIndividualBitsI.style;\r\n\r\n          const arrayIndividualBitsJ = document.getElementsByName(\r\n            nameOrIndexJ\r\n          )[0];\r\n          // const NumberStyleJ = arrayBits[NumberIdxJ].style;\r\n          const BitStyleJ = arrayIndividualBitsJ.style;\r\n          // const colorI =\r\n          //   NumberStyleI.backgroundColor === PRIMARY_COLOR_RGB\r\n          //     ? SECONDARY_COLOR\r\n          //     : PRIMARY_COLOR;\r\n          const colorBitsI = i % 2 === 0 ? BIT_COLOR : PRIMARY_COLOR;\r\n          // const colorJ =\r\n          //   NumberStyleJ.backgroundColor === PRIMARY_COLOR_RGB\r\n          //     ? SECONDARY_COLOR\r\n          //     : PRIMARY_COLOR;\r\n          const colorBitsJ = i % 2 === 0 ? BIT_COLOR : PRIMARY_COLOR;\r\n          nrTimeout++;\r\n          // NumberStyleI.backgroundColor = colorI;\r\n          BitStyleI.backgroundColor = colorBitsI;\r\n          // NumberStyleJ.backgroundColor = colorJ;\r\n          BitStyleJ.backgroundColor = colorBitsJ;\r\n        }, i * animationSpeed);\r\n      } else {\r\n        setTimeout(() => {\r\n          const arrayBits = document.getElementsByClassName(\"array-binary\");\r\n          nrTimeout++;\r\n          const Number2Div = document.getElementsByName(nameOrIndex)[0];\r\n          const Number1Div = arrayBits[NumberIdx];\r\n          const Number2DivName = Number2Div.getAttribute(\"name\");\r\n          Number2Div.setAttribute(\"name\", Number1Div.getAttribute(\"name\"));\r\n          Number1Div.setAttribute(\"name\", Number2DivName);\r\n          /* swap innet HTML */\r\n          const innerHTML = Number1Div.innerHTML;\r\n          Number1Div.innerHTML = Number2Div.innerHTML;\r\n          Number2Div.innerHTML = innerHTML;\r\n          if (nrTimeout === animationsLength) {\r\n            this.setState({\r\n              isAnimated: false,\r\n              array: auxiliaryArray,\r\n              isSorted: true\r\n            });\r\n          }\r\n        }, i * animationSpeed);\r\n      }\r\n    }\r\n  }\r\n\r\n  binarySorts() {\r\n    this.initBinaryArray();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      array,\r\n      isAnimated,\r\n      animationSpeed,\r\n      arraySize,\r\n      binaryArraySize,\r\n      isSorted,\r\n      initArray,\r\n      sortingType,\r\n      key,\r\n      title,\r\n      subTitle\r\n    } = this.state;\r\n    const numberSortingMethods = (\r\n      <ul\r\n        className=\"dropdown-menu dropdown-menu-right p-0\"\r\n        aria-labelledby=\"navbarDropdown\"\r\n        disabled={isAnimated}\r\n      >\r\n        <li>\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateMergeSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            MergeSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateQuickSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            QuickSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            href=\"#\"\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateHeapSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            HeapSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            href=\"#\"\r\n            className=\"navbar-function-link my-auto p-3 btn w-100\"\r\n            onClick={() => this.animateBubbleSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            BubbleSort\r\n          </button>\r\n        </li>\r\n        <li>\r\n          <button\r\n            href=\"#\"\r\n            className=\"navbar-function-link my-auto p-3 btn w-100\"\r\n            onClick={() => this.animateInsertionSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            InsertionSort\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    );\r\n    const binarySortingMethods = (\r\n      <ul\r\n        className=\"dropdown-menu dropdown-menu-right p-0\"\r\n        aria-labelledby=\"navbarDropdown\"\r\n      >\r\n        <li className=\"nav-item  my-auto\">\r\n          <button\r\n            className=\"navbar-function-link  p-3 btn w-100\"\r\n            onClick={() => this.animateRadixSort()}\r\n            disabled={isAnimated}\r\n          >\r\n            RadixSort\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    );\r\n    return (\r\n      <Fragment>\r\n        <nav\r\n          id=\"navbar\"\r\n          className={` navbar navbar-expand-lg navbar-light bg-light fixed-top`}\r\n          style={{ zIndex: \"1\", width: \"100%\" }}\r\n        >\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            <img\r\n              id=\"homeLink\"\r\n              src=\"./logo512.png\"\r\n              alt=\"VisualizeSortingMethods\"\r\n              height=\"80px\"\r\n              width=\"80px\"\r\n            />\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-toggle=\"collapse\"\r\n            data-target=\"#navbarTogglerDemo01\"\r\n            aria-controls=\"navbarTogglerDemo01\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\r\n            <ul className=\"navbar-nav ml-auto mt-2 mt-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <div className=\"form-group p-3\">\r\n                  <label htmlFor=\"animationSpeed\" className=\"\">\r\n                    AnimationSpeed (in ms)\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    id=\"animationSpeed\"\r\n                    name=\"animationSpeed\"\r\n                    value={animationSpeed}\r\n                    onChange={this.onChange}\r\n                    disabled={isAnimated}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <div className=\"form-group p-3\">\r\n                  <label htmlFor=\"arraySize\" className=\"\">\r\n                    ArraySize (in ms)\r\n                  </label>\r\n                  <input\r\n                    className=\"form-control\"\r\n                    type=\"number\"\r\n                    max=\"200\"\r\n                    min=\"1\"\r\n                    id=\"arraySize\"\r\n                    name={\r\n                      sortingType === 0\r\n                        ? \"arraySize\"\r\n                        : sortingType === 1\r\n                        ? \"binaryArraySize\"\r\n                        : \"\"\r\n                    }\r\n                    value={\r\n                      sortingType === 0\r\n                        ? arraySize\r\n                        : sortingType === 1\r\n                        ? binaryArraySize\r\n                        : \"\"\r\n                    }\r\n                    onChange={this.onChange}\r\n                    disabled={isAnimated}\r\n                  />\r\n                </div>\r\n              </li>\r\n              <li className=\"nav-item dropdown align-items-center my-auto\">\r\n                <button\r\n                  className=\"p-3 dropdown-toggle btn navbar-function-link\"\r\n                  id=\"navbarDropdown\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  disabled={isAnimated}\r\n                >\r\n                  SortingType\r\n                </button>\r\n                <ul\r\n                  className=\"dropdown-menu dropdown-menu-right p-0\"\r\n                  aria-labelledby=\"navbarDropdown\"\r\n                >\r\n                  <li>\r\n                    <button\r\n                      className=\"navbar-function-link btn p-3  w-100\"\r\n                      onClick={() => this.initArray()}\r\n                    >\r\n                      Number Sorts\r\n                    </button>\r\n                  </li>\r\n                  <li>\r\n                    <button\r\n                      className=\"navbar-function-link btn p-3  w-100\"\r\n                      onClick={() => this.binarySorts()}\r\n                    >\r\n                      Binary Sorts\r\n                    </button>\r\n                  </li>\r\n                </ul>\r\n              </li>\r\n              <li className=\"nav-item my-auto\">\r\n                <button\r\n                  className=\"navbar-function-link btn p-3\"\r\n                  onClick={() =>\r\n                    sortingType === 0\r\n                      ? this.initArray()\r\n                      : sortingType === 1\r\n                      ? this.initBinaryArray()\r\n                      : \"\"\r\n                  }\r\n                  disabled={isAnimated}\r\n                >\r\n                  Generate new array\r\n                </button>\r\n              </li>\r\n              <li className=\"nav-item dropdown align-items-center my-auto\">\r\n                <button\r\n                  className=\"p-3 dropdown-toggle btn navbar-function-link\"\r\n                  id=\"navbarDropdown\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                  disabled={isAnimated}\r\n                >\r\n                  {sortingType === 0\r\n                    ? \"MethodsForNumbers\"\r\n                    : sortingType === 1\r\n                    ? \"MethodsForBinary\"\r\n                    : \"Methods For Strings\"}\r\n                </button>\r\n                {sortingType === 0\r\n                  ? numberSortingMethods\r\n                  : binarySortingMethods}\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n        <div\r\n          className={` position-absolute w-100 flexbar-bars ${\r\n            sortingType === 0 ? \"h-100 mt-5\" : \"margin-top-navbar\"\r\n          }`}\r\n        >\r\n          <div className=\"container align-bars-center\">\r\n            <h1 className=\"title mt-1\">{title}</h1>\r\n            <h4 className=\" sub-title mb-5\">{subTitle}</h4>\r\n            {array !== undefined && array.length > 0 ? (\r\n              <Visualizers\r\n                key={key}\r\n                arrayInfo={{ array, isSorted, sortingType }}\r\n              ></Visualizers>\r\n            ) : (\r\n              <div>Loading</div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntegerFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import React, { Fragment } from \"react\";\nimport VisualizeSorts from \"./VisualizeSorts/VisualizeSorts\";\nimport \"./VisualizeSorts/VisualizeSorts.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Fragment>\n        <VisualizeSorts></VisualizeSorts>\n      </Fragment>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}